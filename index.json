[{"content":"在查看 Mutex 源码中，看到了 \u0026amp;^ 这个运算符， 没见过，就去查了查。\n含义 按位清零\n即：\n运算符右边数字二进制为1的位置，左边数字二进制对应位置置0 运算符右边数字二进制为0的位置，左边数字二进制对应位置保留 示例 a := 10 b := 2 res := a \u0026amp;^ b fmt.Printf(\u0026#34;a = %b(%d)\\n\u0026#34;, a, a) // a = 1010(10) fmt.Printf(\u0026#34;b = %b(%d)\\n\u0026#34;, b, b) // b = 10(2) fmt.Printf(\u0026#34;res = %b(%d)\\n\u0026#34;, res, res) // res = 1000(8) ","permalink":"https://theone-daxia.github.io/blog/code/go/bit-clear/","summary":"在查看 Mutex 源码中，看到了 \u0026amp;^ 这个运算符， 没见过，就去查了查。\n含义 按位清零\n即：\n运算符右边数字二进制为1的位置，左边数字二进制对应位置置0 运算符右边数字二进制为0的位置，左边数字二进制对应位置保留 示例 a := 10 b := 2 res := a \u0026amp;^ b fmt.Printf(\u0026#34;a = %b(%d)\\n\u0026#34;, a, a) // a = 1010(10) fmt.Printf(\u0026#34;b = %b(%d)\\n\u0026#34;, b, b) // b = 10(2) fmt.Printf(\u0026#34;res = %b(%d)\\n\u0026#34;, res, res) // res = 1000(8) ","title":"\u0026^ 运算符"},{"content":"下面的 MyMutex 即通过原子操作实现了 Locker 接口。\n只是简易实现，实际的 Mutex 还会考虑到给 新来的goroutine、等待的goroutine更多机会， 还有饥饿处理（1ms后），防止队尾的goroutine总是得不到锁。\npackage test import ( \u0026#34;sync\u0026#34; \u0026#34;sync/atomic\u0026#34; \u0026#34;testing\u0026#34; ) type MyMutex struct { key int32 } func (m *MyMutex)Lock() { for !atomic.CompareAndSwapInt32(\u0026amp;m.key, 0, 1) { } } func (m *MyMutex)Unlock() { atomic.StoreInt32(\u0026amp;m.key, 0) } func TestMutex(t *testing.T) { var count = 0 var wg sync.WaitGroup var myMux = MyMutex{} wg.Add(10) for i := 0; i \u0026lt; 10; i++ { go func() { defer wg.Done() for i := 0; i \u0026lt; 10000; i++ { myMux.Lock() count++ myMux.Unlock() } }() } wg.Wait() t.Log(count) } ","permalink":"https://theone-daxia.github.io/blog/code/go/atomic/","summary":"下面的 MyMutex 即通过原子操作实现了 Locker 接口。\n只是简易实现，实际的 Mutex 还会考虑到给 新来的goroutine、等待的goroutine更多机会， 还有饥饿处理（1ms后），防止队尾的goroutine总是得不到锁。\npackage test import ( \u0026#34;sync\u0026#34; \u0026#34;sync/atomic\u0026#34; \u0026#34;testing\u0026#34; ) type MyMutex struct { key int32 } func (m *MyMutex)Lock() { for !atomic.CompareAndSwapInt32(\u0026amp;m.key, 0, 1) { } } func (m *MyMutex)Unlock() { atomic.StoreInt32(\u0026amp;m.key, 0) } func TestMutex(t *testing.T) { var count = 0 var wg sync.WaitGroup var myMux = MyMutex{} wg.Add(10) for i := 0; i \u0026lt; 10; i++ { go func() { defer wg.","title":"原子操作实现互斥锁"},{"content":"数组技巧 前缀和 适用场景\n适用于原始数组不会被修改的情况下，频繁的查询某个区间的累加和。\n构造方式\nnums := []int{1,2,3} preSum := make([]int, len(nums)+1) for i := 1; i \u0026lt; len(nums); i++ { preSum[i] = preSum[i-1] + nums[i-1] } 题目推荐（leetcode）\n303. 区域和检索-数组不可变 304. 二维区域和检索-矩阵不可变 差分数组 适用场景\n适用于频繁对原始数组某个区间的元素进行增减。\n构造方式\nnums := []int{1,2,3,4,5} diff := make([]int, len(nums)) diff[0] = nums[0] for i := 1; i \u0026lt; len(nums); i++ { diff[i] = nums[i] - nums[i-1] } // 如果要对原始数组下标 1-3 区间的元素都加 2，只需做如下两步操作 diff[1] += 2 diff[4] -= 2 // 最后根据 diff 来构造更新后原始数组 res := make([]int, len(diff)) res[0] = diff[0] for i := 1; i \u0026lt; len(diff); i++ { res[i] = res[i-1] + diff[i] } 题目推荐（leetcode）\n1094. 拼车 1109. 航班预订统计 滑动窗口 适用场景\n适用于能回答出以下 3 点问题的子串、子数组问题：\n什么时候扩大窗口？ 什么时候缩小窗口？ 什么时候更新结果？ 代码框架\nleft, right := 0, 0 for right \u0026lt; len(s) { in := s[right] right++ // 扩大窗口 ... // 窗口数据更新 for { out := s[left] left++ // 缩小窗口 ... // 窗口数据更新 } } 题目推荐（leetcode）\n3. 无重复字符的最长子串 76. 最小覆盖子串 209. 长度最小的子数组 219. 存在重复元素 II 220. 存在重复元素 III 395. 至少有 K 个重复字符的最长子串 424. 替换后的最长重复字符 438. 找到字符串中所有字母异位词 567. 字符串的排列 713. 乘积小于K的子数组 862. 和至少为 K 的最短子数组 1004. 最大连续1的个数 III 1438. 绝对差不超过限制的最长连续子数组 动态规划 适用场景\n求最值问题，且具备最优子结构，即能通过子问题的最值得到原问题的最值。\n三要素：最优子结构、重叠子问题、状态转移方程。\n框架\n明确 base case 明确状态（原问题和子问题中会变化的变量） 明确选择（导致状态产生变化的行为） 定义dp数组/函数的含义 自顶向下：会存在一个递归的 dp 函数 自底向上：会存在一个 dp 数组 题目推荐（leetcode）\n322. 零钱兑换 509. 斐波那契数\n回溯算法 适用场景\n排列、组合、子集问题。\n思路：解决一个回溯问题，实际上就是一个决策树的遍历过程，站在决策树的一个节点上，你只需要思考 3 个问题：\n路径：已作出的选择 选择列表：当前可以做的选择 结束条件：到达决策树的底层，无法再做选择的条件 框架\nres := [][]int{} backtrack(路径, 选择列表) { if 满足结束条件 { res = append(res, 路径) } for 选择列表 { 做选择 backtrack(路径, 选择列表) 撤销选择 } } 题目推荐（leetcode）\n46. 全排列 51. N 皇后 77. 组合 78. 子集 ","permalink":"https://theone-daxia.github.io/blog/code/algorithm/thinking/","summary":"数组技巧 前缀和 适用场景\n适用于原始数组不会被修改的情况下，频繁的查询某个区间的累加和。\n构造方式\nnums := []int{1,2,3} preSum := make([]int, len(nums)+1) for i := 1; i \u0026lt; len(nums); i++ { preSum[i] = preSum[i-1] + nums[i-1] } 题目推荐（leetcode）\n303. 区域和检索-数组不可变 304. 二维区域和检索-矩阵不可变 差分数组 适用场景\n适用于频繁对原始数组某个区间的元素进行增减。\n构造方式\nnums := []int{1,2,3,4,5} diff := make([]int, len(nums)) diff[0] = nums[0] for i := 1; i \u0026lt; len(nums); i++ { diff[i] = nums[i] - nums[i-1] } // 如果要对原始数组下标 1-3 区间的元素都加 2，只需做如下两步操作 diff[1] += 2 diff[4] -= 2 // 最后根据 diff 来构造更新后原始数组 res := make([]int, len(diff)) res[0] = diff[0] for i := 1; i \u0026lt; len(diff); i++ { res[i] = res[i-1] + diff[i] } 题目推荐（leetcode）","title":"算法思维框架"},{"content":"项目列表 【星选美次卡】买一赠一M221次卡（限北京）\n【在售价】299元\n毛孔粗大，肤色不均？M22全模式进口光子嫩肤——美白嫩肤界的佼佼者，目前参与内购还可享受买一赠一，快来下单吧！项目原理戳链接了解\n【专享】菲欧曼复合+基础水光/3次/美白 （美次卡限北京）\n【在售价】6000元\n【到手价】3600元\n如果是第一次接触水光，但是又不知道选什么组合和品牌，那么真心推荐从这个组合开始，补水提亮抗衰美白焕肤！重要的是内购价格仅需￥3600！\n【专享】红蓝光祛痘 买1赠1（限北京）\n【在售价】10元\n红蓝光祛痘，强烈安利给大家！蓝光抑菌，红光加速修复，有粉刺闭口痘痘肌的姐妹快快安排吧！项目原理戳链接了解\n【专享】超爆黑钻卡含欧洲之星|AOPT|超皮秒|嗨体等 10选8（限北京）\n【在售价】4665元\n【到手价】2799元\n必Buy Top养肤全套！清洁+水光补水+果酸换肤+紧致皮肤+祛除皱纹+淡斑美白+抗衰嫩肤，10选8，套餐随心搭配，内购价2799，心动不如行动！项目原理戳链接了解\n【专享】小白福利卡含M22|奇致CC光|果酸焕肤等 6选4（限北京）\n【在售价】332元\n【到手价】199元\n改善黑头粉刺，净肤细致毛孔的急救王，熬夜也发光！美肤套卡给你一站式皮肤护理，只需199即可享受4种变美小绝招~ 项目原理戳链接了解\n【专享】CO2剥脱点阵 淡化痘印痘坑（限北京）\n【在售价】399元\n还在为痘坑痘印烦恼？点阵激光妥妥的安排上！专门针对凹陷性痘坑痘印治疗，CO2剥脱点阵，你值得拥有~ 项目原理戳链接了解\n【美次卡】国产除皱单部位祛鱼尾纹眉间纹抬头纹（限北京）\n【在售价】159元\n【美次卡】冰点脱毛 腋下大臂小臂小腿唇毛眉心 6选1（限北京）\n【在售价】39元\n【美次卡】果酸焕肤清洁祛痘改善闭口痤疮痘肌友好（限北京）\n【在售价】69元\n","permalink":"https://theone-daxia.github.io/blog/medical_beauty/project/","summary":"项目列表 【星选美次卡】买一赠一M221次卡（限北京）\n【在售价】299元\n毛孔粗大，肤色不均？M22全模式进口光子嫩肤——美白嫩肤界的佼佼者，目前参与内购还可享受买一赠一，快来下单吧！项目原理戳链接了解\n【专享】菲欧曼复合+基础水光/3次/美白 （美次卡限北京）\n【在售价】6000元\n【到手价】3600元\n如果是第一次接触水光，但是又不知道选什么组合和品牌，那么真心推荐从这个组合开始，补水提亮抗衰美白焕肤！重要的是内购价格仅需￥3600！\n【专享】红蓝光祛痘 买1赠1（限北京）\n【在售价】10元\n红蓝光祛痘，强烈安利给大家！蓝光抑菌，红光加速修复，有粉刺闭口痘痘肌的姐妹快快安排吧！项目原理戳链接了解\n【专享】超爆黑钻卡含欧洲之星|AOPT|超皮秒|嗨体等 10选8（限北京）\n【在售价】4665元\n【到手价】2799元\n必Buy Top养肤全套！清洁+水光补水+果酸换肤+紧致皮肤+祛除皱纹+淡斑美白+抗衰嫩肤，10选8，套餐随心搭配，内购价2799，心动不如行动！项目原理戳链接了解\n【专享】小白福利卡含M22|奇致CC光|果酸焕肤等 6选4（限北京）\n【在售价】332元\n【到手价】199元\n改善黑头粉刺，净肤细致毛孔的急救王，熬夜也发光！美肤套卡给你一站式皮肤护理，只需199即可享受4种变美小绝招~ 项目原理戳链接了解\n【专享】CO2剥脱点阵 淡化痘印痘坑（限北京）\n【在售价】399元\n还在为痘坑痘印烦恼？点阵激光妥妥的安排上！专门针对凹陷性痘坑痘印治疗，CO2剥脱点阵，你值得拥有~ 项目原理戳链接了解\n【美次卡】国产除皱单部位祛鱼尾纹眉间纹抬头纹（限北京）\n【在售价】159元\n【美次卡】冰点脱毛 腋下大臂小臂小腿唇毛眉心 6选1（限北京）\n【在售价】39元\n【美次卡】果酸焕肤清洁祛痘改善闭口痤疮痘肌友好（限北京）\n【在售价】69元","title":"新氧平台医美福利折扣项目"},{"content":" 一片云落入掌心 渺渺万里何处去 只记取离别时的你 仍年少意气 转身过一入天际 愿我如那时的风 拂去尘世俗名轻拥着你 碧落箫声吹尽 沧海一遇却难找寻 前路崇山峻岭不再有你同行 纵使微茫如烟纵有万般思念 流光总将故人搁浅在断简残篇 不成眠 不等谁来证明不必狂歌痛饮 唯盼重相见 归来时一醉明月 这片云不知归期 渺渺万里何处去 只记取离别时的你 仍年少意气 经年过却难忘记 愿我如那时的风 拂去尘世俗名轻拥着你 苍穹箫声吹尽 此生魂梦已逐君去 前路崇山峻岭不再有你同行 纵使微茫如烟纵有万般思念 流光总将古人搁浅在断简残篇 不成眠 不等谁来证明不必狂歌痛饮 唯盼重相见 我如倦鸟归林 纵使微茫如烟纵有万般思念 流光总将故人搁浅在断简残篇 不成眠 不理白驹过隙不信生死有命 唯盼重相见 归来时一醉明月 ","permalink":"https://theone-daxia.github.io/blog/music/doupo_s1/","summary":" 一片云落入掌心 渺渺万里何处去 只记取离别时的你 仍年少意气 转身过一入天际 愿我如那时的风 拂去尘世俗名轻拥着你 碧落箫声吹尽 沧海一遇却难找寻 前路崇山峻岭不再有你同行 纵使微茫如烟纵有万般思念 流光总将故人搁浅在断简残篇 不成眠 不等谁来证明不必狂歌痛饮 唯盼重相见 归来时一醉明月 这片云不知归期 渺渺万里何处去 只记取离别时的你 仍年少意气 经年过却难忘记 愿我如那时的风 拂去尘世俗名轻拥着你 苍穹箫声吹尽 此生魂梦已逐君去 前路崇山峻岭不再有你同行 纵使微茫如烟纵有万般思念 流光总将古人搁浅在断简残篇 不成眠 不等谁来证明不必狂歌痛饮 唯盼重相见 我如倦鸟归林 纵使微茫如烟纵有万般思念 流光总将故人搁浅在断简残篇 不成眠 不理白驹过隙不信生死有命 唯盼重相见 归来时一醉明月 ","title":"从别后"},{"content":" 月光光 照四方 照遍人间水茫茫 风又急 浪又高 妻离子散各一方 山遥遥 水迢迢 会生会死在今朝 心慌慌 意茫茫 天涯明月何皎皎 月光光 照四方 照遍人间水茫茫 风又急 浪又高 妻离子散各一方 山遥遥 水迢迢 会生会死在今朝 心慌慌 意茫茫 天涯明月何皎皎 风一程 雨一程 山河路远不相逢 青鳞快 离愁浓 一梦黄粱太匆匆 江流阔 血流红 白浪滔滔任西东 江湖暗 星河明 轻舟此去不顾停 ","permalink":"https://theone-daxia.github.io/blog/music/chenshixing/","summary":" 月光光 照四方 照遍人间水茫茫 风又急 浪又高 妻离子散各一方 山遥遥 水迢迢 会生会死在今朝 心慌慌 意茫茫 天涯明月何皎皎 月光光 照四方 照遍人间水茫茫 风又急 浪又高 妻离子散各一方 山遥遥 水迢迢 会生会死在今朝 心慌慌 意茫茫 天涯明月何皎皎 风一程 雨一程 山河路远不相逢 青鳞快 离愁浓 一梦黄粱太匆匆 江流阔 血流红 白浪滔滔任西东 江湖暗 星河明 轻舟此去不顾停 ","title":"远行人"},{"content":"什么是 shell shell 就是一个支持输入命令，并显示出命令的输出的东西\n用 go 来写个简单的 shell 并使用它 步骤\n编写代码 build 出二进制文件，并将路径添加到 /etc/shells 里面 更换使用的 shell，退出重进（chsc -s xxx） 完整代码如下\npackage main import ( \u0026#34;bufio\u0026#34; \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;os/exec\u0026#34; \u0026#34;strings\u0026#34; ) func main() { reader := bufio.NewReader(os.Stdin) for { fmt.Print(\u0026#34;\u0026gt; \u0026#34;) // Read the keyboad input input, err := reader.ReadString(\u0026#39;\\n\u0026#39;) if err != nil { fmt.Fprintln(os.Stderr, err) } // Handle the execution of the input if err = execInput(input); err != nil { fmt.Fprintln(os.Stderr, err) } } } func execInput(input string) error { // Remove the newline character input = strings.TrimSuffix(input, \u0026#34;\\n\u0026#34;) // Split the input to separate the command and the arguments args := strings.Split(input, \u0026#34; \u0026#34;) switch args[0] { case \u0026#34;cd\u0026#34;: // \u0026#39;cd\u0026#39; to home dir with empty path not yet supported if len(args) \u0026lt; 2 { return errors.New(\u0026#34;path required\u0026#34;) } // Change the directory and return the error return os.Chdir(args[1]) case \u0026#34;exit\u0026#34;: os.Exit(0) } // Pass the program and the arguments separately cmd := exec.Command(args[0], args[1:]...) // Set the correct output device cmd.Stderr = os.Stderr cmd.Stdout = os.Stdout // Execute the command and return the error return cmd.Run() } 吐槽 写的这个 shell 实在是太简单了，要想达到基本满意的程度，还需要做很多很多， 还是老实用 zsh 吧。\n主要还是想不出什么新意，如果为了平时工作方便，shell 里集成一些命令， 通过更简单的方式来提供复杂的功能，可是 alias 也能做到，何必写个 shell 呢 😂\n虽然这个 shell 很简单，但是还是有一点收获， 比如知道了 cd 并不是一个程序，而是 shell 内置的功能。\n为了写出更有趣、更实用的 shell，如果谁有任何想法，欢迎在我的 订阅号 里留言 🔥\n参考文献 Writing a simple shell in Go ","permalink":"https://theone-daxia.github.io/blog/code/shell_in_go/","summary":"什么是 shell shell 就是一个支持输入命令，并显示出命令的输出的东西\n用 go 来写个简单的 shell 并使用它 步骤\n编写代码 build 出二进制文件，并将路径添加到 /etc/shells 里面 更换使用的 shell，退出重进（chsc -s xxx） 完整代码如下\npackage main import ( \u0026#34;bufio\u0026#34; \u0026#34;errors\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;os/exec\u0026#34; \u0026#34;strings\u0026#34; ) func main() { reader := bufio.NewReader(os.Stdin) for { fmt.Print(\u0026#34;\u0026gt; \u0026#34;) // Read the keyboad input input, err := reader.ReadString(\u0026#39;\\n\u0026#39;) if err != nil { fmt.Fprintln(os.Stderr, err) } // Handle the execution of the input if err = execInput(input); err !","title":"用 go 写个简单的 shell"},{"content":"这应该是我在北京看过的第三个话剧，前两个叫啥已经记不起来了， 总之，他们给我的感觉都差不多，并没有什么震撼，心里没什么波澜。\n这个话剧整体感觉也是如此，但它有个非常特别的地方， 整个2小时的表演时间，完全只有黄湘丽一个人， 大段的台词，变换的灯光，拿起吉他自弹自唱，甚至还有现场做饭，都在体现它的特别。\n整个话剧的内容，是在讲述一个女生从女孩，到少女，再到母亲， 都只是想让那名男子认识她、认出她、爱她。 想要不顾一切，不求回报的爱，最终却选择平静的死亡。\n佩服这位女演员。\n","permalink":"https://theone-daxia.github.io/blog/drama/letter_from_a_strange_woman/","summary":"这应该是我在北京看过的第三个话剧，前两个叫啥已经记不起来了， 总之，他们给我的感觉都差不多，并没有什么震撼，心里没什么波澜。\n这个话剧整体感觉也是如此，但它有个非常特别的地方， 整个2小时的表演时间，完全只有黄湘丽一个人， 大段的台词，变换的灯光，拿起吉他自弹自唱，甚至还有现场做饭，都在体现它的特别。\n整个话剧的内容，是在讲述一个女生从女孩，到少女，再到母亲， 都只是想让那名男子认识她、认出她、爱她。 想要不顾一切，不求回报的爱，最终却选择平静的死亡。\n佩服这位女演员。","title":"一个陌生女人的来信"},{"content":"位置信息 店名：Miss Mousse 蜜丝慕斯蛋糕（望京悠乐汇店） 地点：望京悠乐汇A4座一层底商136 总结 之前买生日蛋糕，总有些不如意， 要不就是有点好看，但是吃起来不好吃， 要不就是感觉比较小，其实量挺大，两个人根本吃不完。\n这一次的生日我\u0026quot;翻山越岭\u0026quot;，在美团上找到了一家蛋糕店，竟有4寸蛋糕， 不仅量符合我的要求，模样之精美更是出乎我的意料，甚至看了下面的评论， 感觉每一个都味道绝佳。\n于是挑选了一款自认为很有仙气的蛋糕，\u0026ldquo;懵懂的椰子\u0026rdquo;， 拿到蛋糕后，果然没让我失望，好看又好吃， 封面图就是我拍的照片， 赠送了心形的燃烧棒（不知道叫啥，临时瞎起的名字）， 两人份的餐具也是精美可爱。\n是一家值得收藏的蛋糕店了，而且他家还提供座位，周日可以在那看书， 空气中还有一股淡淡的甜香，遗憾没能早点发现它。\n","permalink":"https://theone-daxia.github.io/blog/food/birthday_cake/","summary":"位置信息 店名：Miss Mousse 蜜丝慕斯蛋糕（望京悠乐汇店） 地点：望京悠乐汇A4座一层底商136 总结 之前买生日蛋糕，总有些不如意， 要不就是有点好看，但是吃起来不好吃， 要不就是感觉比较小，其实量挺大，两个人根本吃不完。\n这一次的生日我\u0026quot;翻山越岭\u0026quot;，在美团上找到了一家蛋糕店，竟有4寸蛋糕， 不仅量符合我的要求，模样之精美更是出乎我的意料，甚至看了下面的评论， 感觉每一个都味道绝佳。\n于是挑选了一款自认为很有仙气的蛋糕，\u0026ldquo;懵懂的椰子\u0026rdquo;， 拿到蛋糕后，果然没让我失望，好看又好吃， 封面图就是我拍的照片， 赠送了心形的燃烧棒（不知道叫啥，临时瞎起的名字）， 两人份的餐具也是精美可爱。\n是一家值得收藏的蛋糕店了，而且他家还提供座位，周日可以在那看书， 空气中还有一股淡淡的甜香，遗憾没能早点发现它。","title":"生日蛋糕"},{"content":"当前环境 hugo版本：v0.88.1 markdown 解析器：goldmark（Hugo 从 v0.60.0 开始，markdown 解析器就默认使用 goldmark） 下面介绍配置 KaTeX 步骤\n添加 math partial 创建一个 math partial，路径为：/layouts/partials/math.html\n给 math partial 添加内容 在 /layouts/partials/math.html 文件里添加如下内容（ 参考 Auto-render Extension ）\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/katex.min.css\u0026#34; integrity=\u0026#34;sha384-R4558gYOUz8mP9YWpZJjofhk+zx0AS11p36HnD2ZKj/6JR5z27gSSULCNHIRReVs\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/katex.min.js\u0026#34; integrity=\u0026#34;sha384-z1fJDqw8ZApjGO3/unPWUPsIymfsJmyrDVWC8Tv/a1HeOtGmkwNd/7xUS0Xcnvsx\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/contrib/auto-render.min.js\u0026#34; integrity=\u0026#34;sha384-+XBljXPPiv+OzfbB3cVmLHf4hdUFHlWNZN5spNQ7rmHTXpd7WvJum6fIACpNNfIR\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; onload=\u0026#34;renderMathInElement(document.body);\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 只添加上述内容的话，就会只支持 block 公式，为了支持 inline 公式，还要在下方加入如下内容\n\u0026lt;script\u0026gt; document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function() { renderMathInElement(document.body, { // customised options // • auto-render specific keys, e.g.: delimiters: [ {left: \u0026#39;$$\u0026#39;, right: \u0026#39;$$\u0026#39;, display: true}, {left: \u0026#39;$\u0026#39;, right: \u0026#39;$\u0026#39;, display: false}, {left: \u0026#39;\\\\(\u0026#39;, right: \u0026#39;\\\\)\u0026#39;, display: false}, {left: \u0026#39;\\\\[\u0026#39;, right: \u0026#39;\\\\]\u0026#39;, display: true} ], // • rendering keys, e.g.: throwOnError : false }); }); \u0026lt;/script\u0026gt; 将 math partial 引入到模板里 由于我使用的是 papermod 主题，已经提供了 extend_head.html 用以添加自定义的扩展代码， 所以在 extend_head.html 文件里添加如下内容\n{{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} 定义 math 参数 全站生效：可在 config.yml 文件里，添加 math 参数 math: true 只在某片文章里生效：可在文章的 front-matter 里添加参数 math: true 示例 对于这个例子：$\\sum_i^nd_i$，下面给出两种展示效果：\ninline：$\\sum_i^nd_i$ block：$$\\sum_i^nd_i$$ 参考文章 Math Typesetting INLINE MATH WITH KATEX ","permalink":"https://theone-daxia.github.io/blog/code/math_typesetting/","summary":"当前环境 hugo版本：v0.88.1 markdown 解析器：goldmark（Hugo 从 v0.60.0 开始，markdown 解析器就默认使用 goldmark） 下面介绍配置 KaTeX 步骤\n添加 math partial 创建一个 math partial，路径为：/layouts/partials/math.html\n给 math partial 添加内容 在 /layouts/partials/math.html 文件里添加如下内容（ 参考 Auto-render Extension ）\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/katex.min.css\u0026#34; integrity=\u0026#34;sha384-R4558gYOUz8mP9YWpZJjofhk+zx0AS11p36HnD2ZKj/6JR5z27gSSULCNHIRReVs\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/katex.min.js\u0026#34; integrity=\u0026#34;sha384-z1fJDqw8ZApjGO3/unPWUPsIymfsJmyrDVWC8Tv/a1HeOtGmkwNd/7xUS0Xcnvsx\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/contrib/auto-render.min.js\u0026#34; integrity=\u0026#34;sha384-+XBljXPPiv+OzfbB3cVmLHf4hdUFHlWNZN5spNQ7rmHTXpd7WvJum6fIACpNNfIR\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; onload=\u0026#34;renderMathInElement(document.body);\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 只添加上述内容的话，就会只支持 block 公式，为了支持 inline 公式，还要在下方加入如下内容\n\u0026lt;script\u0026gt; document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function() { renderMathInElement(document.body, { // customised options // • auto-render specific keys, e.g.: delimiters: [ {left: \u0026#39;$$\u0026#39;, right: \u0026#39;$$\u0026#39;, display: true}, {left: \u0026#39;$\u0026#39;, right: \u0026#39;$\u0026#39;, display: false}, {left: \u0026#39;\\\\(\u0026#39;, right: \u0026#39;\\\\)\u0026#39;, display: false}, {left: \u0026#39;\\\\[\u0026#39;, right: \u0026#39;\\\\]\u0026#39;, display: true} ], // • rendering keys, e.","title":"hugo支持数学公式排版"},{"content":"缘起 发现最近总是便秘，两三天都不\u0026quot;上大号\u0026quot;，今早起床突然意识到可能是我一直喝胎菊茶造成的。 一查，果然！\n看下面的功效及副作用可知，适量喝可促进消化，预防便秘，但是喝多了，则会出现反效果，还容易损伤脾胃，出现食欲减退的情况。\n这完美的解释了为啥刚开始喝的时候，记得还是作息饮食规律，每天早上都\u0026quot;大号排毒\u0026quot;，最近却经常便秘，且不见好转，吃健胃消食片也没多大用。 不过怎样才算\u0026quot;喝多了\u0026quot;，以我的情况来看，每天 8～10 朵，不断冲泡，喝上 6～8 杯，连续喝 3～4 个月，就算喝多了。\n简介 胎菊又称甘菊、小胎黄、小白菊，古时曾作贡品，是杭白菊中最上品的一种。 在杭白菊花朵未完全张开的时候摘下来，经干燥加工制成。\n胎菊，性微寒，味辛甘苦，能疏散风热、平肝明目、清热解毒。 用胎菊泡茶，味纯正，浓烈，色泽金黄，含有花蜜的清香，泡久了也不会散开。\n功效 1. 明目 胎菊具有很好的护眼、明目的作用，特别适合上班族等长时间面对电脑的人群。\n2. 补肝、清肝 胎菊具有清热解毒的作用，还能增强身体的抵抗力，预防冠心病等。 胎菊和冰糖一起浸泡，还能起到抗菌作用。\n3. 祛除湿气 一般而言，体内湿气过重的症状表现为口干舌燥、眼睛干涩、上火等，此时可泡一杯胎菊茶来缓解。\n4. 缓解便秘 胎菊花富含丹宁，这种物质能有效促进肠胃蠕动，很好的增强身体的消化能力和食欲，让便秘得到缓解。\n副作用 虽然胎菊有保健的功效，但如果长期服用也不好，会引起身体不适。\n1. 腹痛腹泻 胎菊可以促进消化，但喝多了则会出现反效果，导致肠胃出现寒凉之气，出现腹痛腹泻的现象。\n2. 上火 胎菊性微寒，阴虚火热体质的人喝多了会引起上火现象。\n3. 脾胃受损，食欲减退 喝多了胎菊容易引起胃部不适，导致反酸，肠胃分泌液不正常，可能引起食欲减退的情况。因此脾胃虚寒的人更加不能多喝胎菊，容易损伤脾胃。\n","permalink":"https://theone-daxia.github.io/blog/tea/taiju/","summary":"缘起 发现最近总是便秘，两三天都不\u0026quot;上大号\u0026quot;，今早起床突然意识到可能是我一直喝胎菊茶造成的。 一查，果然！\n看下面的功效及副作用可知，适量喝可促进消化，预防便秘，但是喝多了，则会出现反效果，还容易损伤脾胃，出现食欲减退的情况。\n这完美的解释了为啥刚开始喝的时候，记得还是作息饮食规律，每天早上都\u0026quot;大号排毒\u0026quot;，最近却经常便秘，且不见好转，吃健胃消食片也没多大用。 不过怎样才算\u0026quot;喝多了\u0026quot;，以我的情况来看，每天 8～10 朵，不断冲泡，喝上 6～8 杯，连续喝 3～4 个月，就算喝多了。\n简介 胎菊又称甘菊、小胎黄、小白菊，古时曾作贡品，是杭白菊中最上品的一种。 在杭白菊花朵未完全张开的时候摘下来，经干燥加工制成。\n胎菊，性微寒，味辛甘苦，能疏散风热、平肝明目、清热解毒。 用胎菊泡茶，味纯正，浓烈，色泽金黄，含有花蜜的清香，泡久了也不会散开。\n功效 1. 明目 胎菊具有很好的护眼、明目的作用，特别适合上班族等长时间面对电脑的人群。\n2. 补肝、清肝 胎菊具有清热解毒的作用，还能增强身体的抵抗力，预防冠心病等。 胎菊和冰糖一起浸泡，还能起到抗菌作用。\n3. 祛除湿气 一般而言，体内湿气过重的症状表现为口干舌燥、眼睛干涩、上火等，此时可泡一杯胎菊茶来缓解。\n4. 缓解便秘 胎菊花富含丹宁，这种物质能有效促进肠胃蠕动，很好的增强身体的消化能力和食欲，让便秘得到缓解。\n副作用 虽然胎菊有保健的功效，但如果长期服用也不好，会引起身体不适。\n1. 腹痛腹泻 胎菊可以促进消化，但喝多了则会出现反效果，导致肠胃出现寒凉之气，出现腹痛腹泻的现象。\n2. 上火 胎菊性微寒，阴虚火热体质的人喝多了会引起上火现象。\n3. 脾胃受损，食欲减退 喝多了胎菊容易引起胃部不适，导致反酸，肠胃分泌液不正常，可能引起食欲减退的情况。因此脾胃虚寒的人更加不能多喝胎菊，容易损伤脾胃。","title":"胎菊"},{"content":"简介 SSH 除了登陆服务器，还有一大用途，就是作为加密通信的中介，充当两台服务器之间的加密跳板，使得原本不加密的通信变成加密通信。 这个功能成为端口转发（port forwarding），又称 SSH 隧道（tunnel）。\n端口转发有两个主要作用：\n将不加密的数据放在 SSH 安全连接里传输，使原本不安全的网络服务增加了安全性，比如通过端口转发访问 Telnet、FTP 等明文服务，数据传输就都会加密。 作为数据通信的加密跳板，绕过网络防火墙。 三种使用方法 端口转发有三种使用方法：动态转发、本地转发、远程转发。\n1. 动态转发 动态转发是指，本机与 SSH 服务器之间创建了一个加密连接，本机内部针对某个端口的通信，都通过这个加密连接转发。\n动态转发将一个本地端口绑定到了 SSH 服务器，而 目标地址:目标端口 是不固定的，完全由发起的请求决定，所以叫动态转发。\nssh -D local-port tunnel-host -N 上面命令中，-D表示动态转发，local-port是本地端口，tunnel-host是 SSH 服务器， -N表示这个 SSH 连接只进行端口转发，不登录远程 Shell，不能执行远程命令，只能充当隧道。\n如果经常使用动态转发，可以将设置写入 SSH 客户端的个人配置文件（~/.ssh/config）\nDynamicForward tunnel-host:local-port 应用举例 例1：\n远程云主机B1运行了多个服务，分别使用了不同端口，本地主机A1需要访问这些服务。 一方面，由于安全限制，本地主机A1并不能直接访问远程云主机B1上的服务，因此需要进行端口转发， 另一方面，为每个端口分别创建本地端口转发非常麻烦。\n可通过动态端口转发，将A1发起的请求转发到B1，命令如下：\nssh -D localhost:8080 root@xxx.xxx.xxx.xxx -N 注意，这种转发采用了 SOCKS5 协议，访问网站时，需要把 HTTP 请求转成 SOCKS5 协议，才能把本地端口的请求转发出去。 下面是 SSH 隧道建立后的一个使用示例：\ncurl -x socks5://localhost:8080 https://www.google.com 上面命令中，curl 的-x参数指定代理服务器，即通过 SOCKS5 协议的本地 8080 端口，访问https://www.google.com。\n2. 本地转发 本地转发是在本地服务器的 SSH 客户端建立的转发规则。\n本地转发会指定一个本地端口，所有发向那个端口的请求，都会转发到 SSH 跳板机（tunnel-host）， 然后 SSH 跳板机作为中介，将收到的请求发到目标服务器（target-host）的目标端口（target-port）。\nssh -L local-port:target-host:target-port tunnel-host 上面命令中，-L参数表示本地转发，local-port是本地端口， target-host是你想要访问的目标服务器，target-port是目标服务器的端口， tunnel-host是 SSH 跳板机。\n如果经常使用本地转发，可以将设置写入 SSH 客户端的用户个人配置文件（~/.ssh/config）\nHost test.example.com LocalForward client-IP:client-port server-IP:server-port 应用举例 例1：\n有一台阿里云 ECS，安全组默认只允许了 22 端口的访问， 如果上面有一个运行中的服务绑定了 8080 端口，想要临时访问一下该服务的话，该怎么办呢？还得先 这样就比较麻烦，\n一种办法是，先配置安全组，然后进行访问，但这样比较麻烦，还得登后台添加配置。\n另一种就是利用本地转发，非常方便，可以在本地机器运行如下命令：\nssh -L 3000:localhost:8080 ecs-host 上面命令中，ecs-host为 ECS 的地址（比如用户名加公网ip：root@xxx.xxx.xxx.xxx）， 这样就可以通过访问本地的 3000 端口，来请求 ECS 上 8080 端口的服务了。\n3. 远程转发 远程转发是在远程 SSH 服务器建立的转发规则。\n它跟本地转发正好反过来。建立本地到远程服务器的 SSH 隧道以后， 本地转发是通过本地服务器访问远程服务器， 远程转发是通过远程服务器访问本地服务器。 命令格式如下：\nssh -R remote-port:target-host:targer-port -N remote-host 上面命令中，-R表示远程端口转发，remote-port是远程服务器的端口， target-host和target-port是目标服务器及其端口， remote-host是远程服务器。\n如果经常使用远程端口转发，可以将设置写入 SSH 客户端的用户个人配置文件（~/.ssh/config）\nHost remote-forward HostName test.example.com RemoteForward remote-port target-host:target-port 应用举例 例1：\n内网某台服务器 localhost 在 80 端口开了一个服务，可以通过远程转发将这个 80 端口， 映射到具有公网 IP 地址的 public.server 服务器的 8080 端口， 使得访问 public.server:8080 这个地址，就可以访问到那台内网服务器的 80 端口。\nssh -R 8080:localhost:80 -N public.server 例2：\n本地服务器 local 在外网，SSH 跳板机和目标服务器 private.server 都在内网，必须通过 SSH 跳板机才能访问目标服务器。 但是本地服务器 local 无法访问内网中的 SSH 跳板机，而 SSH 跳板机可以访问本地服务器。 由于本机无法访问内网 SSH 跳板机，就无法从外网发起 SSH 隧道，建立端口转发。 得反着来，从 SSH 跳板机发起隧道，建立端口转发，这就形成了远程端口转发。 跳板机执行如下命令，绑定本地服务器 local 的 2121 端口，去访问 private.server:80。\nssh -R 2121:private.server:80 -N local 显然，远程转发要求本地计算机 local 也安装了 SSH 服务器，这样才能接受 SSH 跳板机的远程登录。\n例3：\n家里有台服务器 local，连着家里的 wifi，公司有台处在内网中的服务器 private.server， local 和 private.server 互相都访问不了，但它们都能访问外网。 这时想用家里的服务器 local 访问 private.server:80，该怎么办？\n可以在外网找一个它们都能访问到的服务器，比如还是那台阿里云 ECS（这台 ECS 不能访问 local 和 private.server）， 在 local 上建立 local -\u0026gt; ECS 的本地转发，然后在 private.server 上建立 private.server -\u0026gt; ECS 的远程转发， 这样在 local 访问 localhost:80 就能访问到 private.server 的 80 端口了。\n这也就是所谓的内网穿透。不过涉及公司财产安全，大家不要这样 作死 尝试，因为可能遇到下述情况：\n一哥们穿透内网，被黑客利用，导致内网多台机器数据丢失，被黑客敲诈勒索。\n碰上这种事情，该怎么哭？乖乖申请公司的 VPN 它不香么？\n参考文献 SSH教程 - 网道\n","permalink":"https://theone-daxia.github.io/blog/code/ssh_tunnel/","summary":"简介 SSH 除了登陆服务器，还有一大用途，就是作为加密通信的中介，充当两台服务器之间的加密跳板，使得原本不加密的通信变成加密通信。 这个功能成为端口转发（port forwarding），又称 SSH 隧道（tunnel）。\n端口转发有两个主要作用：\n将不加密的数据放在 SSH 安全连接里传输，使原本不安全的网络服务增加了安全性，比如通过端口转发访问 Telnet、FTP 等明文服务，数据传输就都会加密。 作为数据通信的加密跳板，绕过网络防火墙。 三种使用方法 端口转发有三种使用方法：动态转发、本地转发、远程转发。\n1. 动态转发 动态转发是指，本机与 SSH 服务器之间创建了一个加密连接，本机内部针对某个端口的通信，都通过这个加密连接转发。\n动态转发将一个本地端口绑定到了 SSH 服务器，而 目标地址:目标端口 是不固定的，完全由发起的请求决定，所以叫动态转发。\nssh -D local-port tunnel-host -N 上面命令中，-D表示动态转发，local-port是本地端口，tunnel-host是 SSH 服务器， -N表示这个 SSH 连接只进行端口转发，不登录远程 Shell，不能执行远程命令，只能充当隧道。\n如果经常使用动态转发，可以将设置写入 SSH 客户端的个人配置文件（~/.ssh/config）\nDynamicForward tunnel-host:local-port 应用举例 例1：\n远程云主机B1运行了多个服务，分别使用了不同端口，本地主机A1需要访问这些服务。 一方面，由于安全限制，本地主机A1并不能直接访问远程云主机B1上的服务，因此需要进行端口转发， 另一方面，为每个端口分别创建本地端口转发非常麻烦。\n可通过动态端口转发，将A1发起的请求转发到B1，命令如下：\nssh -D localhost:8080 root@xxx.xxx.xxx.xxx -N 注意，这种转发采用了 SOCKS5 协议，访问网站时，需要把 HTTP 请求转成 SOCKS5 协议，才能把本地端口的请求转发出去。 下面是 SSH 隧道建立后的一个使用示例：\ncurl -x socks5://localhost:8080 https://www.google.com 上面命令中，curl 的-x参数指定代理服务器，即通过 SOCKS5 协议的本地 8080 端口，访问https://www.","title":"SSH 端口转发"},{"content":"目标 使用 GithubPages、Hugo 创建个人博客网站\n功能 正常博客写作 文章支持评论 网站数据分析 准备工作 拥有一个 github 账号 安装 hugo（ Hugo文档 ） 步骤 github 创建两个仓库 一个源码仓库，设置权限为 Private（用于对网站进行任何更改操作） 一个博客仓库，设置权限为 Public（用于对外展示，项目名称为：xxx.github.io，xxx为账户名称） 初始化源码项目 使用 hugo 生成网站 hugo new site quickstart 选择并添加一款心仪主题（ 主题选择 ） # 此处以 Base16 主题为例 cd quickstart/themes git submodule add https://github.com/htdvisser/hugo-base16-theme.git base16 添加博客内容 hugo new blogs/my-first-blog.md 编辑配置文件 config.toml，配置主题及菜单 # 将下面内容添加进 config.toml（不包括本行） theme = \u0026#34;base16\u0026#34; [menu] [[menu.main]] name = \u0026#34;首页\u0026#34; url = \u0026#34;/\u0026#34; weight = 1 [[menu.main]] name = \u0026#34;博客\u0026#34; url = \u0026#34;/blog/\u0026#34; weight = 2 将 quickstart 目录里的内容 push 到源码项目，完成项目初始化 配置 CI/CD 可采用 hugo -D 来生成静态页面，然后同步到公开的博客仓库。 这样做不仅麻烦，也不符合极客精神，所以采用 GithubActions 来自动集成部署。\n配置步骤：\n源码项目根目录下，添加 .github/workflows 文件夹\n在刚创建的文件夹下创建 gh-pages.yml 文件（文件名随便写），写入如下代码\nname: github pages on: push: branches: - main # Set a branch to deploy pull_request: jobs: deploy: runs-on: ubuntu-20.04 steps: - uses: actions/checkout@v2 with: submodules: true # Fetch Hugo themes (true OR recursive) fetch-depth: 0 # Fetch all history for .GitInfo and .Lastmod - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;latest\u0026#39; # extended: true - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: github.ref == \u0026#39;refs/heads/main\u0026#39; with: external_repository: xxx/xxx.github.io\t# 发布到哪个repo deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }} publish_dir: ./public\t# 注意这里指的是要发布哪个文件夹的内容，而不是指发布到目的仓库的什么位置，因为hugo默认生成静态网页到public文件夹，所以这里发布public文件夹里的内容 publish_branch: main\t# 发布到哪个branch 注： 此处的 ACTIONS_DEPLOY_KEY 需要在源码仓库中配置，具体步骤如下\n生成一对新的 SSH Key ssh-keygen -t rsa\n将 Public Key 添加到 xxx.github.io 仓库，setting -\u0026gt; Deploy Keys，变量名随便起，勾选 Allow write access。\n将 Private Key 添加到源码仓库，setting -\u0026gt; Secrets，变量名取 ACTIONS_DEPLOY_KEY\n另： Github Actions 的三种实现方案\ngithub_token\ndeploy_key\npersonal_token\ngithub_token 适合 源码 和 public/ 存放在同一个仓库下的不同分支（比如源码在 main，public/ 内容在 gh-pages），指定部署到 gh-pages 分支即可。\ndeploy_key 适合 源码 和 public/ 存放在不同仓库下的模式（此为本文选择的方式）。\n添加附加功能 文章支持评论 可选择 disqus、utteranc，由于 disqus 比较麻烦，得注册账号，好像还收费？所以选择 utteranc。\nutteranc 是一个免费的 GithubApp，可以在 Github 的 Marketplace 中获取，具体操作不再赘述。 下载后绑定到公开的博客仓库，然后在 layouts/partials/article.html 的合适位置添加如下代码\n{{ if .Site.Params.utteranc.enable }} \u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34; repo=\u0026#34;{{ .Site.Params.utteranc.repo }}\u0026#34; issue-term=\u0026#34;{{ .Site.Params.utteranc.issueTerm }}\u0026#34; theme=\u0026#34;{{ .Site.Params.utteranc.theme }}\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; {{ end }} 在 config.toml 中添加如下配置\n[params.utteranc] enable = false repo = \u0026#34;xxx/xxx.github.io\u0026#34; issueTerm = \u0026#34;title\u0026#34; theme = \u0026#34;github-light\u0026#34; 由于最终显示效果不理想\n个人感觉不好看，跟主题风格不搭 评论区域加载速度慢，进入文章几秒后才会出现 个人也不打算在博客文章里跟人交流 故将 utteranc.enable 置为 false，想启用的时候再说。\n添加谷歌分析 谷歌分析是由Google提供的个人免费的网站流量统计服务，支持查看实时流量，分析功能强大。网页和移动端均可查看（需要有vpn）\n使用步骤：\n登陆谷歌分析（ 登陆地址 ），创建账号及媒体资源\n在创建的媒体资源里，添加数据流（选择网站）\n网站网址：填写博客仓库地址，即 xxx.github.io 数据流名称：自己命名 复制数据流的衡量ID（G-xxx），并将其添加进源码项目的 config.toml 中\ngoogleAnalytics = \u0026#34;G-xxx\u0026#34; 复制 themes/base16/layouts/partials/header.html 到 layouts/partials/header.html，然后在复制出来的 header.html 的 head 标签中添加如下代码\n\u0026lt;!-- 添加谷歌分析插件 Google Analytics --\u0026gt; {{ template \u0026#34;_internal/google_analytics.html\u0026#34; . }} 注：该 template 为 Hugo 附带的一个内部模板\n如果不采用内部模板的写法，还可以将创建数据流时，提示的分析代码添加进 head 标签中，不过这种方法明显没有内部模板的方式优雅\n\u0026lt;!-- Global site tag (gtag.js) - Google Analytics --\u0026gt; \u0026lt;script async src=\u0026#34;https://www.googletagmanager.com/gtag/js?id=G-xxx\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);} gtag(\u0026#39;js\u0026#39;, new Date()); gtag(\u0026#39;config\u0026#39;, \u0026#39;G-xxx\u0026#39;); \u0026lt;/script\u0026gt; 推到源码项目并自动部署后，访问博客，即可在谷歌分析的实时数据中看到统计信息\n添加卜蒜子 卜蒜子 是一个静态页面计数服务，可显示 page_uv、page_pv、site_uv、site_pv 等数据（ 卜蒜子文档 ）。这里利用它给文章加上 page_uv。\n步骤：\n在 layouts/partials/header.html 的 head 标签中添加如下代码\n\u0026lt;script async src=\u0026#34;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 在 layouts/partials/article.html 的 Title 下面添加如下代码\n{{ if .Site.Params.busuanzi.enable }} \u0026lt;div style=\u0026#34;padding: 0 0 1em 0\u0026#34;\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_container_page_pv\u0026#34;\u0026gt; \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34; width=\u0026#34;19\u0026#34; height=\u0026#34;14\u0026#34; viewBox=\u0026#34;0 0 20 20\u0026#34; fill=\u0026#34;none\u0026#34; stroke=\u0026#34;currentColor\u0026#34; stroke-width=\u0026#34;2\u0026#34; stroke-linecap=\u0026#34;round\u0026#34; stroke-linejoin=\u0026#34;round\u0026#34; class=\u0026#34;feather feather-eye\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\u0026#34;\u0026gt;\u0026lt;/path\u0026gt;\u0026lt;circle cx=\u0026#34;12\u0026#34; cy=\u0026#34;12\u0026#34; r=\u0026#34;3\u0026#34;\u0026gt;\u0026lt;/circle\u0026gt;\u0026lt;/svg\u0026gt; \u0026lt;span id=\u0026#34;busuanzi_value_page_pv\u0026#34;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; {{ end }} 注：这个小眼睛的 svg 文件，是从 这里 下载的，感觉很好用。\n在 config.toml 中添加如下配置\n[params.busuanzi] enable = true 推到源码项目并自动部署后，访问博客，即可在文章的标题下看到统计信息\n","permalink":"https://theone-daxia.github.io/blog/code/hugo_blog_site_record/","summary":"目标 使用 GithubPages、Hugo 创建个人博客网站\n功能 正常博客写作 文章支持评论 网站数据分析 准备工作 拥有一个 github 账号 安装 hugo（ Hugo文档 ） 步骤 github 创建两个仓库 一个源码仓库，设置权限为 Private（用于对网站进行任何更改操作） 一个博客仓库，设置权限为 Public（用于对外展示，项目名称为：xxx.github.io，xxx为账户名称） 初始化源码项目 使用 hugo 生成网站 hugo new site quickstart 选择并添加一款心仪主题（ 主题选择 ） # 此处以 Base16 主题为例 cd quickstart/themes git submodule add https://github.com/htdvisser/hugo-base16-theme.git base16 添加博客内容 hugo new blogs/my-first-blog.md 编辑配置文件 config.toml，配置主题及菜单 # 将下面内容添加进 config.toml（不包括本行） theme = \u0026#34;base16\u0026#34; [menu] [[menu.main]] name = \u0026#34;首页\u0026#34; url = \u0026#34;/\u0026#34; weight = 1 [[menu.main]] name = \u0026#34;博客\u0026#34; url = \u0026#34;/blog/\u0026#34; weight = 2 将 quickstart 目录里的内容 push 到源码项目，完成项目初始化 配置 CI/CD 可采用 hugo -D 来生成静态页面，然后同步到公开的博客仓库。 这样做不仅麻烦，也不符合极客精神，所以采用 GithubActions 来自动集成部署。","title":"利用Hugo搭建静态博客网站记录"},{"content":"NRV 计算 在购买预包装食物时，对是否购买？每天该吃多少？等问题，可通过下面的计算进行快速决策 NRV 计算地址\n营养素参考值 ","permalink":"https://theone-daxia.github.io/blog/health/nrv/","summary":"NRV 计算 在购买预包装食物时，对是否购买？每天该吃多少？等问题，可通过下面的计算进行快速决策 NRV 计算地址\n营养素参考值 ","title":"营养素参考值"},{"content":"微信订阅号 ","permalink":"https://theone-daxia.github.io/follow_me/","summary":"微信订阅号 ","title":""}]