<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>冲和</title>
    <link>https://theone-daxia.github.io/</link>
    <description>Recent content on 冲和</description>
    <image>
      <url>https://theone-daxia.github.io/papermod-cover.png</url>
      <link>https://theone-daxia.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 15 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://theone-daxia.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Homebrew 相关问题</title>
      <link>https://theone-daxia.github.io/blog/code/mac/homebrew/</link>
      <pubDate>Thu, 15 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/mac/homebrew/</guid>
      <description>问题列表 mac 系统升级后，使用 homebrew 报错，提示 &amp;ldquo;brew-core is a shallow clone&amp;rdquo;
➜ ~ brew install docker Error: homebrew-core is a shallow clone. To `brew update`, first run: git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow This command may take a few minutes to run due to the large size of the repository. This restriction has been made on GitHub&amp;#39;s request because updating shallow clones is an extremely expensive operation due to the tree layout and traffic of Homebrew/homebrew-core and Homebrew/homebrew-cask.</description>
    </item>
    
    <item>
      <title>github 克隆自己的私有仓库</title>
      <link>https://theone-daxia.github.io/blog/code/github/clone-private/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/github/clone-private/</guid>
      <description>起因 最近换了个电脑，克隆自己的私有仓库时失败， 总是报权限相关的问题。查询文档后，找到解决办法。
文档链接：https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
解决办法 根据文档，按照如下步骤操作：
点击个人头像，在下拉菜单中点击 Settings 点击左边菜单栏最下面的 Developer settings 点击 Personal access tokens 点击 Fine-grained tokens 点击 Generate new token 然后就是按照页面上的选项操作，比如给 token 起名、选择仓库、选择权限、选择过期时间等 最后生成 token，点击复制 再次操作克隆 git clone https://xxx，回车后会让你输入用户名和密码，密码就输入刚才复制的 token，结束！ </description>
    </item>
    
    <item>
      <title>Golang内存管理和垃圾回收</title>
      <link>https://theone-daxia.github.io/blog/code/go/gc/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/go/gc/</guid>
      <description>前言 网上有很多讲 go gc 的文章，但大多讲的不明不白， 一些突然出现的术语更是不知从何而起，导致看过一些文章后对 gc 依旧云里雾里。 好在最近在公众号看到了一篇文章，我觉得写的很赞， 起码解答了那些突然出现的术语是什么。
我决定把它搬运到这里，手写一遍记忆更加深刻。 接下来是对原文的默写，忘了就直接抄写。
原文中会贴出一些 go 的源代码，我本地 go 版本是 1.18.2，对照看的时候会有些出入， 出入的地方我就改贴上我本地的 go 源代码。 所有图片都来源于原文，原文地址在最下面参考文献中列出。 默写加抄写 本文以 go 内存管理为切入点，再到 go 垃圾回收，系统的讲解了 go 自动内存管理系统的设计和原理。
一、TCMalloc go 的内存管理借鉴了 TCMalloc 的设计思想，TCMalloc 全称 Thread-Caching Malloc， 是 google 开发的内存分配器，为了方便理解 go 的内存管理，有必要先熟悉下 TCMalloc。
(一) Page 操作系统对内存的管理以页为单位，TCMalloc 也是这样， 只不过 TCMalloc 里的 Page 大小与操作系统里的大小不一定相等，是倍数的关系。
(二) Span 一组连续的 Page 称为 Span，比如可以有 4 个页大小的 Span，也可以有 8 个页大小的 Span。 Span 比 Page 高一个层级，是为了方便管理一定大小的内存区域， Span 是 TCMalloc 中内存管理的基本单位。</description>
    </item>
    
    <item>
      <title>go实现可重入锁</title>
      <link>https://theone-daxia.github.io/blog/code/go/recursive-mutex/</link>
      <pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/go/recursive-mutex/</guid>
      <description>总结 go 的 Mutex 不支持可重入， 因为它的实现里没有记录哪个 goroutine 拥有这把锁，所以要实现一个可重入的锁， 关键在于要能记录哪个 goroutine 拥有锁，且要记录重入次数。
要记录拥有锁的 goroutine，有两个方案：
获取 goroutine id，来记录哪个 goroutine 获取了锁。 由调用方的 goroutine 提供一个 token，来标识它自己。 对于方案一，获取 goroutine id 有两种方式。
第一种是通过 runtime.Stack() 获取。
func GoId() int64 { var buf [64]byte n := runtime.Stack(buf[:], false) s := strings.TrimPrefix(string(buf[:n]), &amp;#34;goroutine &amp;#34;) idField := strings.Fields(s)[0] id, err := strconv.Atoi(idField) if err != nil { panic(fmt.Sprintf(&amp;#34;cannot get goroutine id: %v\n&amp;#34;, err)) } return int64(id) } 另一种是通过 hacker 方式获取。此方式大致通过以下三步来获取 goroutine id：</description>
    </item>
    
    <item>
      <title>&amp;^ 运算符</title>
      <link>https://theone-daxia.github.io/blog/code/go/bit-clear/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/go/bit-clear/</guid>
      <description>在查看 Mutex 源码中，看到了 &amp;amp;^ 这个运算符， 没见过，就去查了查。
含义 按位清零
即：
运算符右边数字二进制为1的位置，左边数字二进制对应位置置0 运算符右边数字二进制为0的位置，左边数字二进制对应位置保留 示例 a := 10 b := 2 res := a &amp;amp;^ b fmt.Printf(&amp;#34;a = %b(%d)\n&amp;#34;, a, a) // a = 1010(10) fmt.Printf(&amp;#34;b = %b(%d)\n&amp;#34;, b, b) // b = 10(2) fmt.Printf(&amp;#34;res = %b(%d)\n&amp;#34;, res, res) // res = 1000(8) </description>
    </item>
    
    <item>
      <title>原子操作实现互斥锁</title>
      <link>https://theone-daxia.github.io/blog/code/go/atomic/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/go/atomic/</guid>
      <description>下面的 MyMutex 即通过原子操作实现了 Locker 接口。
只是简易实现，实际的 Mutex 还会考虑到给 新来的goroutine、等待的goroutine更多机会， 还有饥饿处理（1ms后），防止队尾的goroutine总是得不到锁。
package test import ( &amp;#34;sync&amp;#34; &amp;#34;sync/atomic&amp;#34; &amp;#34;testing&amp;#34; ) type MyMutex struct { key int32 } func (m *MyMutex)Lock() { for !atomic.CompareAndSwapInt32(&amp;amp;m.key, 0, 1) { } } func (m *MyMutex)Unlock() { atomic.StoreInt32(&amp;amp;m.key, 0) } func TestMutex(t *testing.T) { var count = 0 var wg sync.WaitGroup var myMux = MyMutex{} wg.Add(10) for i := 0; i &amp;lt; 10; i++ { go func() { defer wg.</description>
    </item>
    
    <item>
      <title>算法思维框架</title>
      <link>https://theone-daxia.github.io/blog/code/algorithm/thinking/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/algorithm/thinking/</guid>
      <description>数组技巧 前缀和 适用场景
适用于原始数组不会被修改的情况下，频繁的查询某个区间的累加和。
构造方式
nums := []int{1,2,3} preSum := make([]int, len(nums)+1) for i := 1; i &amp;lt; len(nums); i++ { preSum[i] = preSum[i-1] + nums[i-1] } 题目推荐（leetcode）
303. 区域和检索-数组不可变 304. 二维区域和检索-矩阵不可变 差分数组 适用场景
适用于频繁对原始数组某个区间的元素进行增减。
构造方式
nums := []int{1,2,3,4,5} diff := make([]int, len(nums)) diff[0] = nums[0] for i := 1; i &amp;lt; len(nums); i++ { diff[i] = nums[i] - nums[i-1] } // 如果要对原始数组下标 1-3 区间的元素都加 2，只需做如下两步操作 diff[1] += 2 diff[4] -= 2 // 最后根据 diff 来构造更新后原始数组 res := make([]int, len(diff)) res[0] = diff[0] for i := 1; i &amp;lt; len(diff); i++ { res[i] = res[i-1] + diff[i] } 题目推荐（leetcode）</description>
    </item>
    
    <item>
      <title>新氧平台医美福利折扣项目</title>
      <link>https://theone-daxia.github.io/blog/medical_beauty/project/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/medical_beauty/project/</guid>
      <description>项目列表 【星选美次卡】买一赠一M221次卡（限北京）
【在售价】299元
毛孔粗大，肤色不均？M22全模式进口光子嫩肤——美白嫩肤界的佼佼者，目前参与内购还可享受买一赠一，快来下单吧！项目原理戳链接了解
【专享】菲欧曼复合+基础水光/3次/美白 （美次卡限北京）
【在售价】6000元
【到手价】3600元
如果是第一次接触水光，但是又不知道选什么组合和品牌，那么真心推荐从这个组合开始，补水提亮抗衰美白焕肤！重要的是内购价格仅需￥3600！
【专享】红蓝光祛痘 买1赠1（限北京）
【在售价】10元
红蓝光祛痘，强烈安利给大家！蓝光抑菌，红光加速修复，有粉刺闭口痘痘肌的姐妹快快安排吧！项目原理戳链接了解
【专享】超爆黑钻卡含欧洲之星|AOPT|超皮秒|嗨体等 10选8（限北京）
【在售价】4665元
【到手价】2799元
必Buy Top养肤全套！清洁+水光补水+果酸换肤+紧致皮肤+祛除皱纹+淡斑美白+抗衰嫩肤，10选8，套餐随心搭配，内购价2799，心动不如行动！项目原理戳链接了解
【专享】小白福利卡含M22|奇致CC光|果酸焕肤等 6选4（限北京）
【在售价】332元
【到手价】199元
改善黑头粉刺，净肤细致毛孔的急救王，熬夜也发光！美肤套卡给你一站式皮肤护理，只需199即可享受4种变美小绝招~ 项目原理戳链接了解
【专享】CO2剥脱点阵 淡化痘印痘坑（限北京）
【在售价】399元
还在为痘坑痘印烦恼？点阵激光妥妥的安排上！专门针对凹陷性痘坑痘印治疗，CO2剥脱点阵，你值得拥有~ 项目原理戳链接了解
【美次卡】国产除皱单部位祛鱼尾纹眉间纹抬头纹（限北京）
【在售价】159元
【美次卡】冰点脱毛 腋下大臂小臂小腿唇毛眉心 6选1（限北京）
【在售价】39元
【美次卡】果酸焕肤清洁祛痘改善闭口痤疮痘肌友好（限北京）
【在售价】69元</description>
    </item>
    
    <item>
      <title>从别后</title>
      <link>https://theone-daxia.github.io/blog/music/doupo_s1/</link>
      <pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/music/doupo_s1/</guid>
      <description>斗破苍穹-特别篇1</description>
    </item>
    
    <item>
      <title>远行人</title>
      <link>https://theone-daxia.github.io/blog/music/chenshixing/</link>
      <pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/music/chenshixing/</guid>
      <description>枕刀歌</description>
    </item>
    
    <item>
      <title>用 go 写个简单的 shell</title>
      <link>https://theone-daxia.github.io/blog/code/shell_in_go/</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/shell_in_go/</guid>
      <description>什么是 shell shell 就是一个支持输入命令，并显示出命令的输出的东西
用 go 来写个简单的 shell 并使用它 步骤
编写代码 build 出二进制文件，并将路径添加到 /etc/shells 里面 更换使用的 shell，退出重进（chsc -s xxx） 完整代码如下
package main import ( &amp;#34;bufio&amp;#34; &amp;#34;errors&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;os/exec&amp;#34; &amp;#34;strings&amp;#34; ) func main() { reader := bufio.NewReader(os.Stdin) for { fmt.Print(&amp;#34;&amp;gt; &amp;#34;) // Read the keyboad input input, err := reader.ReadString(&amp;#39;\n&amp;#39;) if err != nil { fmt.Fprintln(os.Stderr, err) } // Handle the execution of the input if err = execInput(input); err !</description>
    </item>
    
    <item>
      <title>一个陌生女人的来信</title>
      <link>https://theone-daxia.github.io/blog/drama/letter_from_a_strange_woman/</link>
      <pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/drama/letter_from_a_strange_woman/</guid>
      <description>这应该是我在北京看过的第三个话剧，前两个叫啥已经记不起来了， 总之，他们给我的感觉都差不多，并没有什么震撼，心里没什么波澜。
这个话剧整体感觉也是如此，但它有个非常特别的地方， 整个2小时的表演时间，完全只有黄湘丽一个人， 大段的台词，变换的灯光，拿起吉他自弹自唱，甚至还有现场做饭，都在体现它的特别。
整个话剧的内容，是在讲述一个女生从女孩，到少女，再到母亲， 都只是想让那名男子认识她、认出她、爱她。 想要不顾一切，不求回报的爱，最终却选择平静的死亡。
佩服这位女演员。</description>
    </item>
    
    <item>
      <title>生日蛋糕</title>
      <link>https://theone-daxia.github.io/blog/food/birthday_cake/</link>
      <pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/food/birthday_cake/</guid>
      <description>位置信息 店名：Miss Mousse 蜜丝慕斯蛋糕（望京悠乐汇店） 地点：望京悠乐汇A4座一层底商136 总结 之前买生日蛋糕，总有些不如意， 要不就是有点好看，但是吃起来不好吃， 要不就是感觉比较小，其实量挺大，两个人根本吃不完。
这一次的生日我&amp;quot;翻山越岭&amp;quot;，在美团上找到了一家蛋糕店，竟有4寸蛋糕， 不仅量符合我的要求，模样之精美更是出乎我的意料，甚至看了下面的评论， 感觉每一个都味道绝佳。
于是挑选了一款自认为很有仙气的蛋糕，&amp;ldquo;懵懂的椰子&amp;rdquo;， 拿到蛋糕后，果然没让我失望，好看又好吃， 封面图就是我拍的照片， 赠送了心形的燃烧棒（不知道叫啥，临时瞎起的名字）， 两人份的餐具也是精美可爱。
是一家值得收藏的蛋糕店了，而且他家还提供座位，周日可以在那看书， 空气中还有一股淡淡的甜香，遗憾没能早点发现它。</description>
    </item>
    
    <item>
      <title>hugo支持数学公式排版</title>
      <link>https://theone-daxia.github.io/blog/code/math_typesetting/</link>
      <pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/math_typesetting/</guid>
      <description>当前环境 hugo版本：v0.88.1 markdown 解析器：goldmark（Hugo 从 v0.60.0 开始，markdown 解析器就默认使用 goldmark） 下面介绍配置 KaTeX 步骤
添加 math partial 创建一个 math partial，路径为：/layouts/partials/math.html
给 math partial 添加内容 在 /layouts/partials/math.html 文件里添加如下内容（ 参考 Auto-render Extension ）
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/katex.min.css&amp;#34; integrity=&amp;#34;sha384-R4558gYOUz8mP9YWpZJjofhk+zx0AS11p36HnD2ZKj/6JR5z27gSSULCNHIRReVs&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt; &amp;lt;script defer src=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/katex.min.js&amp;#34; integrity=&amp;#34;sha384-z1fJDqw8ZApjGO3/unPWUPsIymfsJmyrDVWC8Tv/a1HeOtGmkwNd/7xUS0Xcnvsx&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script defer src=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/contrib/auto-render.min.js&amp;#34; integrity=&amp;#34;sha384-+XBljXPPiv+OzfbB3cVmLHf4hdUFHlWNZN5spNQ7rmHTXpd7WvJum6fIACpNNfIR&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34; onload=&amp;#34;renderMathInElement(document.body);&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 只添加上述内容的话，就会只支持 block 公式，为了支持 inline 公式，还要在下方加入如下内容
&amp;lt;script&amp;gt; document.addEventListener(&amp;#34;DOMContentLoaded&amp;#34;, function() { renderMathInElement(document.body, { // customised options // • auto-render specific keys, e.g.: delimiters: [ {left: &amp;#39;$$&amp;#39;, right: &amp;#39;$$&amp;#39;, display: true}, {left: &amp;#39;$&amp;#39;, right: &amp;#39;$&amp;#39;, display: false}, {left: &amp;#39;\\(&amp;#39;, right: &amp;#39;\\)&amp;#39;, display: false}, {left: &amp;#39;\\[&amp;#39;, right: &amp;#39;\\]&amp;#39;, display: true} ], // • rendering keys, e.</description>
    </item>
    
    <item>
      <title>胎菊</title>
      <link>https://theone-daxia.github.io/blog/tea/taiju/</link>
      <pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/tea/taiju/</guid>
      <description>缘起 发现最近总是便秘，两三天都不&amp;quot;上大号&amp;quot;，今早起床突然意识到可能是我一直喝胎菊茶造成的。 一查，果然！
看下面的功效及副作用可知，适量喝可促进消化，预防便秘，但是喝多了，则会出现反效果，还容易损伤脾胃，出现食欲减退的情况。
这完美的解释了为啥刚开始喝的时候，记得还是作息饮食规律，每天早上都&amp;quot;大号排毒&amp;quot;，最近却经常便秘，且不见好转，吃健胃消食片也没多大用。 不过怎样才算&amp;quot;喝多了&amp;quot;，以我的情况来看，每天 8～10 朵，不断冲泡，喝上 6～8 杯，连续喝 3～4 个月，就算喝多了。
简介 胎菊又称甘菊、小胎黄、小白菊，古时曾作贡品，是杭白菊中最上品的一种。 在杭白菊花朵未完全张开的时候摘下来，经干燥加工制成。
胎菊，性微寒，味辛甘苦，能疏散风热、平肝明目、清热解毒。 用胎菊泡茶，味纯正，浓烈，色泽金黄，含有花蜜的清香，泡久了也不会散开。
功效 1. 明目 胎菊具有很好的护眼、明目的作用，特别适合上班族等长时间面对电脑的人群。
2. 补肝、清肝 胎菊具有清热解毒的作用，还能增强身体的抵抗力，预防冠心病等。 胎菊和冰糖一起浸泡，还能起到抗菌作用。
3. 祛除湿气 一般而言，体内湿气过重的症状表现为口干舌燥、眼睛干涩、上火等，此时可泡一杯胎菊茶来缓解。
4. 缓解便秘 胎菊花富含丹宁，这种物质能有效促进肠胃蠕动，很好的增强身体的消化能力和食欲，让便秘得到缓解。
副作用 虽然胎菊有保健的功效，但如果长期服用也不好，会引起身体不适。
1. 腹痛腹泻 胎菊可以促进消化，但喝多了则会出现反效果，导致肠胃出现寒凉之气，出现腹痛腹泻的现象。
2. 上火 胎菊性微寒，阴虚火热体质的人喝多了会引起上火现象。
3. 脾胃受损，食欲减退 喝多了胎菊容易引起胃部不适，导致反酸，肠胃分泌液不正常，可能引起食欲减退的情况。因此脾胃虚寒的人更加不能多喝胎菊，容易损伤脾胃。</description>
    </item>
    
    <item>
      <title>SSH 端口转发</title>
      <link>https://theone-daxia.github.io/blog/code/ssh_tunnel/</link>
      <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/ssh_tunnel/</guid>
      <description>简介 SSH 除了登陆服务器，还有一大用途，就是作为加密通信的中介，充当两台服务器之间的加密跳板，使得原本不加密的通信变成加密通信。 这个功能成为端口转发（port forwarding），又称 SSH 隧道（tunnel）。
端口转发有两个主要作用：
将不加密的数据放在 SSH 安全连接里传输，使原本不安全的网络服务增加了安全性，比如通过端口转发访问 Telnet、FTP 等明文服务，数据传输就都会加密。 作为数据通信的加密跳板，绕过网络防火墙。 三种使用方法 端口转发有三种使用方法：动态转发、本地转发、远程转发。
1. 动态转发 动态转发是指，本机与 SSH 服务器之间创建了一个加密连接，本机内部针对某个端口的通信，都通过这个加密连接转发。
动态转发将一个本地端口绑定到了 SSH 服务器，而 目标地址:目标端口 是不固定的，完全由发起的请求决定，所以叫动态转发。
ssh -D local-port tunnel-host -N 上面命令中，-D表示动态转发，local-port是本地端口，tunnel-host是 SSH 服务器， -N表示这个 SSH 连接只进行端口转发，不登录远程 Shell，不能执行远程命令，只能充当隧道。
如果经常使用动态转发，可以将设置写入 SSH 客户端的个人配置文件（~/.ssh/config）
DynamicForward tunnel-host:local-port 应用举例 例1：
远程云主机B1运行了多个服务，分别使用了不同端口，本地主机A1需要访问这些服务。 一方面，由于安全限制，本地主机A1并不能直接访问远程云主机B1上的服务，因此需要进行端口转发， 另一方面，为每个端口分别创建本地端口转发非常麻烦。
可通过动态端口转发，将A1发起的请求转发到B1，命令如下：
ssh -D localhost:8080 root@xxx.xxx.xxx.xxx -N 注意，这种转发采用了 SOCKS5 协议，访问网站时，需要把 HTTP 请求转成 SOCKS5 协议，才能把本地端口的请求转发出去。 下面是 SSH 隧道建立后的一个使用示例：
curl -x socks5://localhost:8080 https://www.google.com 上面命令中，curl 的-x参数指定代理服务器，即通过 SOCKS5 协议的本地 8080 端口，访问https://www.</description>
    </item>
    
    <item>
      <title>利用Hugo搭建静态博客网站记录</title>
      <link>https://theone-daxia.github.io/blog/code/hugo_blog_site_record/</link>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/hugo_blog_site_record/</guid>
      <description>记录建站过程</description>
    </item>
    
    <item>
      <title>营养素参考值</title>
      <link>https://theone-daxia.github.io/blog/health/nrv/</link>
      <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/health/nrv/</guid>
      <description>可以查看每日所需营养素的量，计算预包装食物NRV%</description>
    </item>
    
    <item>
      <title></title>
      <link>https://theone-daxia.github.io/follow_me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/follow_me/</guid>
      <description>微信订阅号 </description>
    </item>
    
    
    
    
    
  </channel>
</rss>
