<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>冲和</title>
    <link>https://theone-daxia.github.io/</link>
    <description>Recent content on 冲和</description>
    <image>
      <title>冲和</title>
      <url>https://theone-daxia.github.io/papermod-cover.png</url>
      <link>https://theone-daxia.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 21 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://theone-daxia.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>利用 ChatGPT 解决数据建模竞赛问题</title>
      <link>https://theone-daxia.github.io/blog/code/aigc/kaggle/</link>
      <pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/aigc/kaggle/</guid>
      <description>Kaggle Kaggle 成立于2010年，是一个进行数据发掘和预测竞赛的在线平台。 从公司的角度来讲，可以提供一些数据，进而提出一个实际需要解决的问题； 从参赛者的角度来讲，他们将组队参与项目，针对其中一个问题提出解决方案， 最终由公司选出的最佳方案可以获得5K-10K美金的奖金。
Kaggle上的竞赛有各种分类，例如奖金极高竞争激烈的的 “Featured”，相对平民化的 “Research”等等。 但他们整体的项目模式是一样的，就是 通过出题方给予的训练集建立模型，再利用测试集算出结果用来评比。
Kaggle 竞赛另一个有趣的地方在于每个人都有自己的Profile， 上面会显示所有自己参与过的项目、活跃度、实时排位、历史最佳排位等， 不仅看上去非常有成就感，更能在求职和申请的时候起到Certificate的作用。
以上摘自 Kaggle入门，看这一篇就够了
利用 ChatGPT 解决竞赛问题 有了 ChatGPT 的好处就是，很多东西的门槛都降低了，我之前从未了解过 Data Science， 也可以利用 ChatGPT 来帮我写代码，解决 Kaggle 竞赛问题了。
这次的竞赛是「帮助保险公司预测保单是否是欺诈保单」。
竞赛地址： https://www.kaggle.com/c/fraud-detection-in-insurance-claims
ChatGPT 提问记录 你现在是一个数据建模人员，要对保险反欺诈进行预测。数据包括下面两部分：1.训练集 train.csv(40个字段，有fraud_reported字段) 2.测试集 test.csv(39个字段，没有fraud_reported字段)。如果你明白了需求，请回复明白。 首先需要你对数据进行加载，分别得到 train 和 test，给我对应的 python 代码。 将 train 和 test 合并成一个数据集 data 对 data 进行数据探索，包括：缺失值，字段的唯一值个数 对 data，去掉没有用的字段 &amp;lsquo;_c39&amp;rsquo; 筛选 data 中的字符串字段，赋值给 cat_columns 对 data 中的这些字符串字段，计算唯一值个数，并按照唯一值个数从大到小排序 将 data 中的 policy_bind_date 和 incident_date 转换为日期类型 计算 policy_bind_date 中的最小值 对 data 新建字段 policy_bind_date_diff，等于 (policy_bind_date - policy_bind_date 中的最小值) 的天数 对 data 新建字段 incident_date_diff，等于 (incident_date - incident_date 中的最小值) 的天数 去掉 data 中的两个字段：policy_bind_date，incident_date 如何将 data 中的所有字符串类型字段转换为数值类型 使用标签编码，将 data 中的所有字符串类型的字段转换为数值类型 之前 data 是由 train 和 test 合并来的，现在要把他拆分回 train 和 test 原来的数据里面没有 is_train 不对，我知道原来 train 的行数 获取 train 的行数 使用 LightGBM 模型，针对 train 进行建模，目标字段为 fraud_reported，对 test 进行预测 读取 sampleSubmission.</description>
    </item>
    
    <item>
      <title>MySQL 单表不要超过 2000w 行？</title>
      <link>https://theone-daxia.github.io/blog/code/mysql/2000w/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/mysql/2000w/</guid>
      <description>单表建议存放多少数据？ 在主键索引上，用户记录是按页（数据页）存放在叶子节点，索引也是按页（索引页）存放在非叶子节点。 索引页的内容是 id 和页号地址。 id：对应页中最小记录的 id 值。 页号地址：地址是指向对应页的指针。 B+ 树是一个多叉树，假设：
非叶子节点内指向其他页的数量为 x。 叶子节点内容纳的数据行数为 y。 B+ 树的层数为 z。 整棵树存储的用户记录数量为 total。 则 total = x ^ (z-1) * y ，即 x 的 z-1 次方再乘以 y。
x 是多少？ 数据页中，除了用户记录外，还有固定的几部分：
文件头（38B） 页头（56B） 最小最大记录（26B） 页目录（不好精确） 文件尾（8B） 加起来就算作 1K 吧，整页是 16K，用来存数据的就是 15K。 在索引页中主要记录的是主键与页号，主键假设是 bigint（8B），页号是固定的（4B）， 那么索引页中一条数据是 12B，则 x = 15 * 1024 / 12 ≈ 1280。
y 是多少？ 同 x，一页中有 15K 是用来存数据的，但是一行用户记录的大小影响因素有很多，比如字段数量、字段类型等。 每行数据所占空间越大，每页中存储的行数越少。
这里先假设每行记录占 1K，则 y = 15。</description>
    </item>
    
    <item>
      <title>数据页</title>
      <link>https://theone-daxia.github.io/blog/code/mysql/data_page/</link>
      <pubDate>Thu, 08 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/mysql/data_page/</guid>
      <description>InnoDB 是如何存储数据的？ InnoDB 的数据是按「数据页」为单位进行读写的。一页默认大小为 16KB。 意味着数据库一次最少从磁盘中读取 16KB 的数据到内存中，一次最少将内存中 16KB 的数据刷到磁盘中。
数据页的结构 数据页的结构如下图： 每一部分的作用如下
文件头：表示页的通用信息。 页头：表示页的状态信息。 最小最大记录：两个虚拟的伪记录，分别表示页中的最小和最大记录。 用户记录：存储行记录。 空闲空间：页中还没有使用的空间。 页目录：存储用户记录的相对位置，对记录起到索引的作用。 文件尾：校验页是否完整。 文件头中有两个指针，分别指向上一个数据页和下一个数据页，连起来的页相当于一个双向链表。 采用链表的结构，是让数据页之间不需要物理上连续，而是逻辑上连续。
数据页中的用户记录是如何组织的？ 数据页中的用户记录按照主键顺序组成单向链表。 单向链表的特点就是插入、删除方便，但是查询效率不高，最差情况需要遍历完所有节点才能检索到数据。
为了加快检索，就设计了页目录。页目录与用户记录的关系如下图： 页目录的创建过程如下：
将所有的记录划分为几个组，包括最小最大记录，但不包括标记为已删除的记录。 每个组最后一条记录的头信息中存储该组一共有多少条记录，字段为 n_owned（上图中粉色字段）。 页目录用来存储每组最后一条记录的地址偏移量，称为槽（slot），每个槽相当于指向了每组的最后一条记录。 所以页目录就是由多个槽组成，槽相当于分组记录的索引。 每个分组的记录数不会很多，只有几条，因为 InnoDB 对每个分组中的记录数有如下规定：
第一个分组中的记录只能有 1 条。 最后一个分组中的记录条数范围为 1～8 条。 其余分组中的记录条数范围为 4～8 条。 如何在数据页中查找数据？ 以上图为例，如何查找主键值为 11 的用户记录？
因为用户记录是按照主键值从小到大排序的，所以槽也是从小到大排序的， 所以在数据页中查找记录可以用二分法，具体查找过程如下：
二分找到槽中间位为 2，2号槽最大记录为 8，8 &amp;lt; 11，继续往后找。 二分找到槽中间位为 3，2号槽最大记录为 12，12 &amp;gt; 11，所以要找的记录在 3 号槽里。 再次找到槽 2，即主键值为 8 的记录，然后往后遍历，直到找到主键值为 11 的记录。 参考 从数据页的角度看 B+ 树 </description>
    </item>
    
    <item>
      <title>轻量应用服务器配置crontab后无效</title>
      <link>https://theone-daxia.github.io/blog/code/linux/crontab/</link>
      <pubDate>Thu, 25 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/linux/crontab/</guid>
      <description>背景 需要定时同步订单数据，所以在阿里云轻量应用服务器上配置了 crontab， 发现并未生效，但是手动执行命令是可以的。
问题 crontab -e 配置定时任务后，未生效。
解决 怀疑是环境变量未获取到的原因， 就在定时任务前加了 source /etc/profile，至此解决。
# 之前的配置 * * * * * cd xxx &amp;amp;&amp;amp; php artisan schedule:run &amp;gt;&amp;gt; /dev/null 2&amp;gt;&amp;amp;1 # 修改之后的配置 * * * * * source /etc/profile;cd xxx &amp;amp;&amp;amp; php artisan schedule:run &amp;gt;&amp;gt; /dev/null 2&amp;gt;&amp;amp;1 具体可参考这篇文章 【转载】Linux 中 Crontab 执行时的环境变量问题</description>
    </item>
    
    <item>
      <title>Linux 服务器最大 TCP 连接数</title>
      <link>https://theone-daxia.github.io/blog/code/linux/max-tcp-connect-count/</link>
      <pubDate>Thu, 02 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/linux/max-tcp-connect-count/</guid>
      <description>单台服务器最大并发 TCP 连接数 如何标识一个 TCP 连接 TCP 连接四元组： {源IP，源端口，目的IP，目的端口}
客户端最大 TCP 连接数 client 每次发起 TCP 连接请求时，除非绑定端口，通常会让系统选取一个空闲端口， 该端口是独占的，不能和其他 TCP 连接共享。TCP 协议端口用 16 bits 描述，所以 最多有 65536 个端口，又因为端口 0 有特殊含义，不能使用，所以客户端最大 TCP 连接数为 65535。
服务端最大 TCP 连接数（理论上） server 通常固定监听某个本地端口。TCP 连接四元组中，只有源IP、源端口是变化的， 所以最大 TCP 连接数为：客户端IP数 x 客户端端口数，对 IPV4，不考虑地址分类等 因素，最大 TCP 连接数为: 2^32 * 2^16 = 2^48
单台服务器上，服务端并发 TCP 连接数实际能有多少？ 2^48 是理论上单机最大连接数，实际环境中，受到机器资源、操作系统等的限制，最大 TCP 并发连接数远不能达到理论上限。在 Unix/Linux 系统下限制连接数的主要因素是 内存和允许打开的文件描述符个数。每个 TCP 连接都要占用一定内存，大概 15～20k， 每个 socket 就是一个文件描述符。
影响一个 socket 占用内存的参数包括： rmem_max, wmem_max, tcp_rmem, tcp_wmem, tcp_mem 等。</description>
    </item>
    
    <item>
      <title>docker核心技术</title>
      <link>https://theone-daxia.github.io/blog/code/docker/base/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/docker/base/</guid>
      <description>namespace（隔离性） linux namespace 是一种 linux kernel 提供的资源隔离方案：
系统可以为进程分配不同的 namespace。 保证不同的 namespace 资源独立分配、进程彼此隔离，即不同 namespace 下的进程互不干扰。 linux 内核代码中 namespace 的实现 进程数据结构 struct task_struct { ... /* namespaces */ struct nsproxy *nsproxy; ... } 这里 nsproxy 属性就表示这个进程所在的 namespace 的信息。
namespace 数据结构 struct nsproxy { atomic_t count; struct uts_namespace *uts_ns; struct ipc_namespace *ipc_ns; struct mnt_namespace *mnt_ns; struct pid_namespace *pid_ns_for_children; struct net *net_ns; } linux 对 namespace 的操作方法 clone
在创建新进程的系统调用时，可以通过 flags 参数指定需要新建的 namespace 类型： // CLONE_NEWCGROUP, CLONE_NEWIPC, CLONE_NEWNET, CLONE_NEWNS, // CLONE_NEWPID, CLONE_NEWUSER, CLONE_NEWUTS</description>
    </item>
    
    <item>
      <title>TCP 之 RST</title>
      <link>https://theone-daxia.github.io/blog/code/linux/rst/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/linux/rst/</guid>
      <description>什么是 RST TCP 正常情况下断开连接是用四次挥手，但异常情况下，收发双方都不一定正常， 可能做不到挥手，所以就需要一个机制去强行关闭连接。
RST 就是用于这种情况，一般用来异常的关闭一个连接。它是 TCP 包头的一个标志位。 正常情况下，不管是发出还是收到 RST 数据包，相应的内存、端口等连接资源就会被释放， 效果上看，就是 TCP 连接被关闭了。收到 RST 的一方，一般会看到 connection reset 或 connection refused 的报错。
如何知道收到了 RST 内核跟应用层是分开的两层，网络通信功能在内核，客户端或服务端属于应用层。 应用层只能通过 send/recv 与内核交互，才能感知到内核是否收到了 RST。
当本端收到远端发来的 RST 后，内核认为此连接已经关闭。
此时如果本端应用层尝试执行读操作（recv），应用层就会收到 Connection reset by peer 的报错，意思是远端已经关闭连接。
如果本端应用层尝试执行写操作（send），应用层就会收到 Broken pipe 的报错，意思是发送通道已经坏了。
出现 RST 的场景有哪些 一般归类为 对端的端口不可用 和 socket 提前关闭
端口未监听
连接一个未监听的端口，服务端收到客户端的 SYN 后，会根据 IP 和 端口从全局哈希表获取 sock， 服务端没执行过 listen()，不会有对应的 sock，正常情况下，服务端会发送一个 RST。
不正常情况：比如 tcp_checksum_complete() 检验后发现数据包校验和不合法，就会直接丢弃，不发 RST。
程序启动过，但现在崩了
本质上跟端口未监听一样。服务端程序崩溃后，原来监听的端口资源就会被释放， 此时服务端收到了来自客户端的消息，查找不到 sock，回一个 RST。</description>
    </item>
    
    <item>
      <title>练手小项目-Chat Demo</title>
      <link>https://theone-daxia.github.io/blog/code/go/chat-demo/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/go/chat-demo/</guid>
      <description>go编写的聊天小项目</description>
    </item>
    
    <item>
      <title>练手小项目-Pacman</title>
      <link>https://theone-daxia.github.io/blog/code/go/pacman/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/go/pacman/</guid>
      <description>go编写的终端小游戏</description>
    </item>
    
    <item>
      <title>composer require maatwebsite/excel ^3.1 失败</title>
      <link>https://theone-daxia.github.io/blog/code/laravel/composer/</link>
      <pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/laravel/composer/</guid>
      <description>问题 如题，安装 maatwebsite/excel 3.x 版本失败，提示各种依赖不满足
解决 在提示的最后一行有下面这句
Use the option --with-all-dependencies (-W) to allow upgrades, downgrades and removals for packages currently locked to specific versions. 所以执行 composer require maatwebsite/excel ^3.1 -W 即可。</description>
    </item>
    
    <item>
      <title>laravel 配置 https</title>
      <link>https://theone-daxia.github.io/blog/code/laravel/https/</link>
      <pubDate>Sat, 28 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/laravel/https/</guid>
      <description>laravel 设置 https 的几种情况 提交表单，提示不安全问题 &amp;lt;!-- 原来的写法 --&amp;gt; &amp;lt;form action=&amp;#34;{{ route(&amp;#39;order/import&amp;#39;) }}&amp;#34; method=&amp;#34;POST&amp;#34; enctype=&amp;#34;multipart/form-data&amp;#34;&amp;gt;&amp;lt;/form&amp;gt; &amp;lt;!-- 修改后的写法 --&amp;gt; &amp;lt;!-- --&amp;gt; &amp;lt;form action=&amp;#34;{{ secure_url(&amp;#39;order/import&amp;#39;) }}&amp;#34; method=&amp;#34;POST&amp;#34; enctype=&amp;#34;multipart/form-data&amp;#34;&amp;gt;&amp;lt;/form&amp;gt; 即使用 secure_url() 方法替换 route() 方法即可。
注意：使用 secure_url() 时，如果不是相对路径，则需要将第三个参数设置为 false， 即 secure_url(&amp;lsquo;your path&amp;rsquo;, [], false)。
全局使用 https 在使用相关框架做管理后台开发，比如 nova、laravel-admin、orchid 等， 需要配置使用 https 时，有以下两种方法。
1. 修改 nginx 配置 在对应项目的 nginx 配置中，添加 fastcgi_patam HTTPS on;
location ~ [^/]\.php(/|$) { #fastcgi_pass remote_php_ip:9000; fastcgi_pass unix:/dev/shm/php-cgi.sock; fastcgi_index index.php; fastcgi_param HTTPS on; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } 2.</description>
    </item>
    
    <item>
      <title>Homebrew 相关问题</title>
      <link>https://theone-daxia.github.io/blog/code/mac/homebrew/</link>
      <pubDate>Thu, 15 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/mac/homebrew/</guid>
      <description>问题列表 mac 系统升级后，使用 homebrew 报错，提示 &amp;ldquo;brew-core is a shallow clone&amp;rdquo;
➜ ~ brew install docker Error: homebrew-core is a shallow clone. To `brew update`, first run: git -C /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core fetch --unshallow This command may take a few minutes to run due to the large size of the repository. This restriction has been made on GitHub&amp;#39;s request because updating shallow clones is an extremely expensive operation due to the tree layout and traffic of Homebrew/homebrew-core and Homebrew/homebrew-cask.</description>
    </item>
    
    <item>
      <title>github 克隆自己的私有仓库</title>
      <link>https://theone-daxia.github.io/blog/code/github/clone-private/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/github/clone-private/</guid>
      <description>起因 最近换了个电脑，克隆自己的私有仓库时失败， 总是报权限相关的问题。查询文档后，找到解决办法。
文档链接：https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
解决办法 根据文档，按照如下步骤操作：
点击个人头像，在下拉菜单中点击 Settings 点击左边菜单栏最下面的 Developer settings 点击 Personal access tokens 点击 Fine-grained tokens 点击 Generate new token 然后就是按照页面上的选项操作，比如给 token 起名、选择仓库、选择权限、选择过期时间等 最后生成 token，点击复制 再次操作克隆 git clone https://xxx，回车后会让你输入用户名和密码，密码就输入刚才复制的 token，结束！ </description>
    </item>
    
    <item>
      <title>Golang内存管理和垃圾回收</title>
      <link>https://theone-daxia.github.io/blog/code/go/gc/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/go/gc/</guid>
      <description>前言 网上有很多讲 go gc 的文章，但大多讲的不明不白， 一些突然出现的术语更是不知从何而起，导致看过一些文章后对 gc 依旧云里雾里。 好在最近在公众号看到了一篇文章，我觉得写的很赞， 起码解答了那些突然出现的术语是什么。
我决定把它搬运到这里，手写一遍记忆更加深刻。 接下来是对原文的默写，忘了就直接抄写。
原文中会贴出一些 go 的源代码，我本地 go 版本是 1.18.2，对照看的时候会有些出入， 出入的地方我就改贴上我本地的 go 源代码。 所有图片都来源于原文，原文地址在最下面参考文献中列出。 默写加抄写 本文以 go 内存管理为切入点，再到 go 垃圾回收，系统的讲解了 go 自动内存管理系统的设计和原理。
一、TCMalloc go 的内存管理借鉴了 TCMalloc 的设计思想，TCMalloc 全称 Thread-Caching Malloc， 是 google 开发的内存分配器，为了方便理解 go 的内存管理，有必要先熟悉下 TCMalloc。
(一) Page 操作系统对内存的管理以页为单位，TCMalloc 也是这样， 只不过 TCMalloc 里的 Page 大小与操作系统里的大小不一定相等，是倍数的关系。
(二) Span 一组连续的 Page 称为 Span，比如可以有 4 个页大小的 Span，也可以有 8 个页大小的 Span。 Span 比 Page 高一个层级，是为了方便管理一定大小的内存区域， Span 是 TCMalloc 中内存管理的基本单位。</description>
    </item>
    
    <item>
      <title>go 字符串拼接对比</title>
      <link>https://theone-daxia.github.io/blog/code/go/string-join/</link>
      <pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/go/string-join/</guid>
      <description>字符串拼接方式 += bytes.Buffer{}.WriteString() strings.Builder{}.WriteString() copy 基准测试 代码：
var ( str = &amp;#34;s&amp;#34; count = 1000 expectStr = strings.Repeat(str, count) ) func BenchmarkPlus(b *testing.B) { for i := 0; i &amp;lt; b.N; i++ { var s string for j := 0; j &amp;lt; count; j++ { s += str } if expectStr != s { b.Error(&amp;#34;repeat count error&amp;#34;) } } } func BenchmarkBuffer(b *testing.B) { for i := 0; i &amp;lt; b.</description>
    </item>
    
    <item>
      <title>go实现可重入锁</title>
      <link>https://theone-daxia.github.io/blog/code/go/recursive-mutex/</link>
      <pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/go/recursive-mutex/</guid>
      <description>总结 go 的 Mutex 不支持可重入， 因为它的实现里没有记录哪个 goroutine 拥有这把锁，所以要实现一个可重入的锁， 关键在于要能记录哪个 goroutine 拥有锁，且要记录重入次数。
要记录拥有锁的 goroutine，有两个方案：
获取 goroutine id，来记录哪个 goroutine 获取了锁。 由调用方的 goroutine 提供一个 token，来标识它自己。 对于方案一，获取 goroutine id 有两种方式。
第一种是通过 runtime.Stack() 获取。
func GoId() int64 { var buf [64]byte n := runtime.Stack(buf[:], false) s := strings.TrimPrefix(string(buf[:n]), &amp;#34;goroutine &amp;#34;) idField := strings.Fields(s)[0] id, err := strconv.Atoi(idField) if err != nil { panic(fmt.Sprintf(&amp;#34;cannot get goroutine id: %v\n&amp;#34;, err)) } return int64(id) } 另一种是通过 hacker 方式获取。此方式大致通过以下三步来获取 goroutine id：</description>
    </item>
    
    <item>
      <title>&amp;^ 运算符</title>
      <link>https://theone-daxia.github.io/blog/code/go/bit-clear/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/go/bit-clear/</guid>
      <description>在查看 Mutex 源码中，看到了 &amp;amp;^ 这个运算符， 没见过，就去查了查。
含义 按位清零
即：
运算符右边数字二进制为1的位置，左边数字二进制对应位置置0 运算符右边数字二进制为0的位置，左边数字二进制对应位置保留 示例 a := 10 b := 2 res := a &amp;amp;^ b fmt.Printf(&amp;#34;a = %b(%d)\n&amp;#34;, a, a) // a = 1010(10) fmt.Printf(&amp;#34;b = %b(%d)\n&amp;#34;, b, b) // b = 10(2) fmt.Printf(&amp;#34;res = %b(%d)\n&amp;#34;, res, res) // res = 1000(8) </description>
    </item>
    
    <item>
      <title>原子操作实现互斥锁</title>
      <link>https://theone-daxia.github.io/blog/code/go/atomic/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/go/atomic/</guid>
      <description>下面的 MyMutex 即通过原子操作实现了 Locker 接口。
只是简易实现，实际的 Mutex 还会考虑到给 新来的goroutine、等待的goroutine更多机会， 还有饥饿处理（1ms后），防止队尾的goroutine总是得不到锁。
package test import ( &amp;#34;sync&amp;#34; &amp;#34;sync/atomic&amp;#34; &amp;#34;testing&amp;#34; ) type MyMutex struct { key int32 } func (m *MyMutex)Lock() { for !atomic.CompareAndSwapInt32(&amp;amp;m.key, 0, 1) { } } func (m *MyMutex)Unlock() { atomic.StoreInt32(&amp;amp;m.key, 0) } func TestMutex(t *testing.T) { var count = 0 var wg sync.WaitGroup var myMux = MyMutex{} wg.Add(10) for i := 0; i &amp;lt; 10; i++ { go func() { defer wg.</description>
    </item>
    
    <item>
      <title>算法思维框架</title>
      <link>https://theone-daxia.github.io/blog/code/algorithm/thinking/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/algorithm/thinking/</guid>
      <description>数组技巧 前缀和 适用场景
适用于原始数组不会被修改的情况下，频繁的查询某个区间的累加和。
构造方式
nums := []int{1,2,3} preSum := make([]int, len(nums)+1) for i := 1; i &amp;lt; len(nums); i++ { preSum[i] = preSum[i-1] + nums[i-1] } 题目推荐（leetcode）
303. 区域和检索-数组不可变 304. 二维区域和检索-矩阵不可变 差分数组 适用场景
适用于频繁对原始数组某个区间的元素进行增减。
构造方式
nums := []int{1,2,3,4,5} diff := make([]int, len(nums)) diff[0] = nums[0] for i := 1; i &amp;lt; len(nums); i++ { diff[i] = nums[i] - nums[i-1] } // 如果要对原始数组下标 1-3 区间的元素都加 2，只需做如下两步操作 diff[1] += 2 diff[4] -= 2 // 最后根据 diff 来构造更新后原始数组 res := make([]int, len(diff)) res[0] = diff[0] for i := 1; i &amp;lt; len(diff); i++ { res[i] = res[i-1] + diff[i] } 题目推荐（leetcode）</description>
    </item>
    
    <item>
      <title>新氧平台医美福利折扣项目</title>
      <link>https://theone-daxia.github.io/blog/medical_beauty/project/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/medical_beauty/project/</guid>
      <description>项目列表 【星选美次卡】买一赠一M221次卡（限北京）
【在售价】299元
毛孔粗大，肤色不均？M22全模式进口光子嫩肤——美白嫩肤界的佼佼者，目前参与内购还可享受买一赠一，快来下单吧！项目原理戳链接了解
【专享】菲欧曼复合+基础水光/3次/美白 （美次卡限北京）
【在售价】6000元
【到手价】3600元
如果是第一次接触水光，但是又不知道选什么组合和品牌，那么真心推荐从这个组合开始，补水提亮抗衰美白焕肤！重要的是内购价格仅需￥3600！
【专享】红蓝光祛痘 买1赠1（限北京）
【在售价】10元
红蓝光祛痘，强烈安利给大家！蓝光抑菌，红光加速修复，有粉刺闭口痘痘肌的姐妹快快安排吧！项目原理戳链接了解
【专享】超爆黑钻卡含欧洲之星|AOPT|超皮秒|嗨体等 10选8（限北京）
【在售价】4665元
【到手价】2799元
必Buy Top养肤全套！清洁+水光补水+果酸换肤+紧致皮肤+祛除皱纹+淡斑美白+抗衰嫩肤，10选8，套餐随心搭配，内购价2799，心动不如行动！项目原理戳链接了解
【专享】小白福利卡含M22|奇致CC光|果酸焕肤等 6选4（限北京）
【在售价】332元
【到手价】199元
改善黑头粉刺，净肤细致毛孔的急救王，熬夜也发光！美肤套卡给你一站式皮肤护理，只需199即可享受4种变美小绝招~ 项目原理戳链接了解
【专享】CO2剥脱点阵 淡化痘印痘坑（限北京）
【在售价】399元
还在为痘坑痘印烦恼？点阵激光妥妥的安排上！专门针对凹陷性痘坑痘印治疗，CO2剥脱点阵，你值得拥有~ 项目原理戳链接了解
【美次卡】国产除皱单部位祛鱼尾纹眉间纹抬头纹（限北京）
【在售价】159元
【美次卡】冰点脱毛 腋下大臂小臂小腿唇毛眉心 6选1（限北京）
【在售价】39元
【美次卡】果酸焕肤清洁祛痘改善闭口痤疮痘肌友好（限北京）
【在售价】69元</description>
    </item>
    
    <item>
      <title>从别后</title>
      <link>https://theone-daxia.github.io/blog/music/doupo_s1/</link>
      <pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/music/doupo_s1/</guid>
      <description>斗破苍穹-特别篇1</description>
    </item>
    
    <item>
      <title>远行人</title>
      <link>https://theone-daxia.github.io/blog/music/chenshixing/</link>
      <pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/music/chenshixing/</guid>
      <description>枕刀歌</description>
    </item>
    
    <item>
      <title>用 go 写个简单的 shell</title>
      <link>https://theone-daxia.github.io/blog/code/shell_in_go/</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/shell_in_go/</guid>
      <description>什么是 shell shell 就是一个支持输入命令，并显示出命令的输出的东西
用 go 来写个简单的 shell 并使用它 步骤
编写代码 build 出二进制文件，并将路径添加到 /etc/shells 里面 更换使用的 shell，退出重进（chsc -s xxx） 完整代码如下
package main import ( &amp;#34;bufio&amp;#34; &amp;#34;errors&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;os/exec&amp;#34; &amp;#34;strings&amp;#34; ) func main() { reader := bufio.NewReader(os.Stdin) for { fmt.Print(&amp;#34;&amp;gt; &amp;#34;) // Read the keyboad input input, err := reader.ReadString(&amp;#39;\n&amp;#39;) if err != nil { fmt.Fprintln(os.Stderr, err) } // Handle the execution of the input if err = execInput(input); err !</description>
    </item>
    
    <item>
      <title>一个陌生女人的来信</title>
      <link>https://theone-daxia.github.io/blog/drama/letter_from_a_strange_woman/</link>
      <pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/drama/letter_from_a_strange_woman/</guid>
      <description>这应该是我在北京看过的第三个话剧，前两个叫啥已经记不起来了， 总之，他们给我的感觉都差不多，并没有什么震撼，心里没什么波澜。
这个话剧整体感觉也是如此，但它有个非常特别的地方， 整个2小时的表演时间，完全只有黄湘丽一个人， 大段的台词，变换的灯光，拿起吉他自弹自唱，甚至还有现场做饭，都在体现它的特别。
整个话剧的内容，是在讲述一个女生从女孩，到少女，再到母亲， 都只是想让那名男子认识她、认出她、爱她。 想要不顾一切，不求回报的爱，最终却选择平静的死亡。
佩服这位女演员。</description>
    </item>
    
    <item>
      <title>生日蛋糕</title>
      <link>https://theone-daxia.github.io/blog/food/birthday_cake/</link>
      <pubDate>Mon, 27 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/food/birthday_cake/</guid>
      <description>位置信息 店名：Miss Mousse 蜜丝慕斯蛋糕（望京悠乐汇店） 地点：望京悠乐汇A4座一层底商136 总结 之前买生日蛋糕，总有些不如意， 要不就是有点好看，但是吃起来不好吃， 要不就是感觉比较小，其实量挺大，两个人根本吃不完。
这一次的生日我&amp;quot;翻山越岭&amp;quot;，在美团上找到了一家蛋糕店，竟有4寸蛋糕， 不仅量符合我的要求，模样之精美更是出乎我的意料，甚至看了下面的评论， 感觉每一个都味道绝佳。
于是挑选了一款自认为很有仙气的蛋糕，&amp;ldquo;懵懂的椰子&amp;rdquo;， 拿到蛋糕后，果然没让我失望，好看又好吃， 封面图就是我拍的照片， 赠送了心形的燃烧棒（不知道叫啥，临时瞎起的名字）， 两人份的餐具也是精美可爱。
是一家值得收藏的蛋糕店了，而且他家还提供座位，周日可以在那看书， 空气中还有一股淡淡的甜香，遗憾没能早点发现它。</description>
    </item>
    
    <item>
      <title>hugo支持数学公式排版</title>
      <link>https://theone-daxia.github.io/blog/code/math_typesetting/</link>
      <pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/math_typesetting/</guid>
      <description>当前环境 hugo版本：v0.88.1 markdown 解析器：goldmark（Hugo 从 v0.60.0 开始，markdown 解析器就默认使用 goldmark） 下面介绍配置 KaTeX 步骤
添加 math partial 创建一个 math partial，路径为：/layouts/partials/math.html
给 math partial 添加内容 在 /layouts/partials/math.html 文件里添加如下内容（ 参考 Auto-render Extension ）
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/katex.min.css&amp;#34; integrity=&amp;#34;sha384-R4558gYOUz8mP9YWpZJjofhk+zx0AS11p36HnD2ZKj/6JR5z27gSSULCNHIRReVs&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt; &amp;lt;script defer src=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/katex.min.js&amp;#34; integrity=&amp;#34;sha384-z1fJDqw8ZApjGO3/unPWUPsIymfsJmyrDVWC8Tv/a1HeOtGmkwNd/7xUS0Xcnvsx&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script defer src=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.15.1/dist/contrib/auto-render.min.js&amp;#34; integrity=&amp;#34;sha384-+XBljXPPiv+OzfbB3cVmLHf4hdUFHlWNZN5spNQ7rmHTXpd7WvJum6fIACpNNfIR&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34; onload=&amp;#34;renderMathInElement(document.body);&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 只添加上述内容的话，就会只支持 block 公式，为了支持 inline 公式，还要在下方加入如下内容
&amp;lt;script&amp;gt; document.addEventListener(&amp;#34;DOMContentLoaded&amp;#34;, function() { renderMathInElement(document.body, { // customised options // • auto-render specific keys, e.g.: delimiters: [ {left: &amp;#39;$$&amp;#39;, right: &amp;#39;$$&amp;#39;, display: true}, {left: &amp;#39;$&amp;#39;, right: &amp;#39;$&amp;#39;, display: false}, {left: &amp;#39;\\(&amp;#39;, right: &amp;#39;\\)&amp;#39;, display: false}, {left: &amp;#39;\\[&amp;#39;, right: &amp;#39;\\]&amp;#39;, display: true} ], // • rendering keys, e.</description>
    </item>
    
    <item>
      <title>胎菊</title>
      <link>https://theone-daxia.github.io/blog/tea/taiju/</link>
      <pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/tea/taiju/</guid>
      <description>缘起 发现最近总是便秘，两三天都不&amp;quot;上大号&amp;quot;，今早起床突然意识到可能是我一直喝胎菊茶造成的。 一查，果然！
看下面的功效及副作用可知，适量喝可促进消化，预防便秘，但是喝多了，则会出现反效果，还容易损伤脾胃，出现食欲减退的情况。
这完美的解释了为啥刚开始喝的时候，记得还是作息饮食规律，每天早上都&amp;quot;大号排毒&amp;quot;，最近却经常便秘，且不见好转，吃健胃消食片也没多大用。 不过怎样才算&amp;quot;喝多了&amp;quot;，以我的情况来看，每天 8～10 朵，不断冲泡，喝上 6～8 杯，连续喝 3～4 个月，就算喝多了。
简介 胎菊又称甘菊、小胎黄、小白菊，古时曾作贡品，是杭白菊中最上品的一种。 在杭白菊花朵未完全张开的时候摘下来，经干燥加工制成。
胎菊，性微寒，味辛甘苦，能疏散风热、平肝明目、清热解毒。 用胎菊泡茶，味纯正，浓烈，色泽金黄，含有花蜜的清香，泡久了也不会散开。
功效 1. 明目 胎菊具有很好的护眼、明目的作用，特别适合上班族等长时间面对电脑的人群。
2. 补肝、清肝 胎菊具有清热解毒的作用，还能增强身体的抵抗力，预防冠心病等。 胎菊和冰糖一起浸泡，还能起到抗菌作用。
3. 祛除湿气 一般而言，体内湿气过重的症状表现为口干舌燥、眼睛干涩、上火等，此时可泡一杯胎菊茶来缓解。
4. 缓解便秘 胎菊花富含丹宁，这种物质能有效促进肠胃蠕动，很好的增强身体的消化能力和食欲，让便秘得到缓解。
副作用 虽然胎菊有保健的功效，但如果长期服用也不好，会引起身体不适。
1. 腹痛腹泻 胎菊可以促进消化，但喝多了则会出现反效果，导致肠胃出现寒凉之气，出现腹痛腹泻的现象。
2. 上火 胎菊性微寒，阴虚火热体质的人喝多了会引起上火现象。
3. 脾胃受损，食欲减退 喝多了胎菊容易引起胃部不适，导致反酸，肠胃分泌液不正常，可能引起食欲减退的情况。因此脾胃虚寒的人更加不能多喝胎菊，容易损伤脾胃。</description>
    </item>
    
    <item>
      <title>SSH 端口转发</title>
      <link>https://theone-daxia.github.io/blog/code/ssh_tunnel/</link>
      <pubDate>Wed, 24 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/ssh_tunnel/</guid>
      <description>简介 SSH 除了登陆服务器，还有一大用途，就是作为加密通信的中介，充当两台服务器之间的加密跳板，使得原本不加密的通信变成加密通信。 这个功能成为端口转发（port forwarding），又称 SSH 隧道（tunnel）。
端口转发有两个主要作用：
将不加密的数据放在 SSH 安全连接里传输，使原本不安全的网络服务增加了安全性，比如通过端口转发访问 Telnet、FTP 等明文服务，数据传输就都会加密。 作为数据通信的加密跳板，绕过网络防火墙。 三种使用方法 端口转发有三种使用方法：动态转发、本地转发、远程转发。
1. 动态转发 动态转发是指，本机与 SSH 服务器之间创建了一个加密连接，本机内部针对某个端口的通信，都通过这个加密连接转发。
动态转发将一个本地端口绑定到了 SSH 服务器，而 目标地址:目标端口 是不固定的，完全由发起的请求决定，所以叫动态转发。
ssh -D local-port tunnel-host -N 上面命令中，-D表示动态转发，local-port是本地端口，tunnel-host是 SSH 服务器， -N表示这个 SSH 连接只进行端口转发，不登录远程 Shell，不能执行远程命令，只能充当隧道。
如果经常使用动态转发，可以将设置写入 SSH 客户端的个人配置文件（~/.ssh/config）
DynamicForward tunnel-host:local-port 应用举例 例1：
远程云主机B1运行了多个服务，分别使用了不同端口，本地主机A1需要访问这些服务。 一方面，由于安全限制，本地主机A1并不能直接访问远程云主机B1上的服务，因此需要进行端口转发， 另一方面，为每个端口分别创建本地端口转发非常麻烦。
可通过动态端口转发，将A1发起的请求转发到B1，命令如下：
ssh -D localhost:8080 root@xxx.xxx.xxx.xxx -N 注意，这种转发采用了 SOCKS5 协议，访问网站时，需要把 HTTP 请求转成 SOCKS5 协议，才能把本地端口的请求转发出去。 下面是 SSH 隧道建立后的一个使用示例：
curl -x socks5://localhost:8080 https://www.google.com 上面命令中，curl 的-x参数指定代理服务器，即通过 SOCKS5 协议的本地 8080 端口，访问https://www.</description>
    </item>
    
    <item>
      <title>利用Hugo搭建静态博客网站记录</title>
      <link>https://theone-daxia.github.io/blog/code/hugo_blog_site_record/</link>
      <pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/hugo_blog_site_record/</guid>
      <description>记录建站过程</description>
    </item>
    
    <item>
      <title>营养素参考值</title>
      <link>https://theone-daxia.github.io/blog/health/nrv/</link>
      <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/health/nrv/</guid>
      <description>可以查看每日所需营养素的量，计算预包装食物NRV%</description>
    </item>
    
    <item>
      <title></title>
      <link>https://theone-daxia.github.io/follow_me/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/follow_me/</guid>
      <description>微信订阅号 </description>
    </item>
    
    
    
    
    
  </channel>
</rss>
