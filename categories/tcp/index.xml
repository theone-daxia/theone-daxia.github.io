<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>TCP on 冲和</title>
    <link>https://theone-daxia.github.io/categories/tcp/</link>
    <description>Recent content in TCP on 冲和</description>
    <image>
      <url>https://theone-daxia.github.io/papermod-cover.png</url>
      <link>https://theone-daxia.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 26 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://theone-daxia.github.io/categories/tcp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TCP 之 RST</title>
      <link>https://theone-daxia.github.io/blog/code/tcp/rst/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/tcp/rst/</guid>
      <description>什么是 RST TCP 正常情况下断开连接是用四次挥手，但异常情况下，收发双方都不一定正常， 可能做不到挥手，所以就需要一个机制去强行关闭连接。
RST 就是用于这种情况，一般用来异常的关闭一个连接。它是 TCP 包头的一个标志位。 正常情况下，不管是发出还是收到 RST 数据包，相应的内存、端口等连接资源就会被释放， 效果上看，就是 TCP 连接被关闭了。收到 RST 的一方，一般会看到 connection reset 或 connection refused 的报错。
如何知道收到了 RST 内核跟应用层是分开的两层，网络通信功能在内核，客户端或服务端属于应用层。 应用层只能通过 send/recv 与内核交互，才能感知到内核是否收到了 RST。
当本端收到远端发来的 RST 后，内核认为此连接已经关闭。
此时如果本端应用层尝试执行读操作（recv），应用层就会收到 Connection reset by peer 的报错，意思是远端已经关闭连接。
如果本端应用层尝试执行写操作（send），应用层就会收到 Broken pipe 的报错，意思是发送通道已经坏了。
出现 RST 的场景有哪些 一般归类为 对端的端口不可用 和 socket 提前关闭
端口未监听
连接一个未监听的端口，服务端收到客户端的 SYN 后，会根据 IP 和 端口从全局哈希表获取 sock， 服务端没执行过 listen()，不会有对应的 sock，正常情况下，服务端会发送一个 RST。
不正常情况：比如 tcp_checksum_complete() 检验后发现数据包校验和不合法，就会直接丢弃，不发 RST。
程序启动过，但现在崩了
本质上跟端口未监听一样。服务端程序崩溃后，原来监听的端口资源就会被释放， 此时服务端收到了来自客户端的消息，查找不到 sock，回一个 RST。</description>
    </item>
    
  </channel>
</rss>
