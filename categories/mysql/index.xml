<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>MySQL on 冲和</title>
    <link>https://theone-daxia.github.io/categories/mysql/</link>
    <description>Recent content in MySQL on 冲和</description>
    <image>
      <title>冲和</title>
      <url>https://theone-daxia.github.io/papermod-cover.png</url>
      <link>https://theone-daxia.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 08 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://theone-daxia.github.io/categories/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据页</title>
      <link>https://theone-daxia.github.io/blog/code/mysql/data_page/</link>
      <pubDate>Thu, 08 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/mysql/data_page/</guid>
      <description>InnoDB 是如何存储数据的？ InnoDB 的数据是按「数据页」为单位进行读写的。一页默认大小为 16KB。 意味着数据库一次最少从磁盘中读取 16KB 的数据到内存中，一次最少将内存中 16KB 的数据刷到磁盘中。
数据页的结构 数据页的结构如下图： 每一部分的作用如下
文件头：表示页的通用信息。 页头：表示页的状态信息。 最小最大记录：两个虚拟的伪记录，分别表示页中的最小和最大记录。 用户记录：存储行记录。 空闲空间：页中还没有使用的空间。 页目录：存储用户记录的相对位置，对记录起到索引的作用。 文件尾：校验页是否完整。 文件头中有两个指针，分别指向上一个数据页和下一个数据页，连起来的页相当于一个双向链表。 采用链表的结构，是让数据页之间不需要物理上连续，而是逻辑上连续。
数据页中的用户记录是如何组织的？ 数据页中的用户记录按照主键顺序组成单向链表。 单向链表的特点就是插入、删除方便，但是查询效率不高，最差情况需要遍历完所有节点才能检索到数据。
为了加快检索，就设计了页目录。页目录与用户记录的关系如下图： 页目录的创建过程如下：
将所有的记录划分为几个组，包括最小最大记录，但不包括标记为已删除的记录。 每个组最后一条记录的头信息中存储该组一共有多少条记录，字段为 n_owned（上图中粉色字段）。 页目录用来存储每组最后一条记录的地址偏移量，称为槽（slot），每个槽相当于指向了每组的最后一条记录。 所以页目录就是由多个槽组成，槽相当于分组记录的索引。 每个分组的记录数不会很多，只有几条，因为 InnoDB 对每个分组中的记录数有如下规定：
第一个分组中的记录只能有 1 条。 最后一个分组中的记录条数范围为 1～8 条。 其余分组中的记录条数范围为 4～8 条。 如何在数据页中查找数据？ 以上图为例，如何查找主键值为 11 的用户记录？
因为用户记录是按照主键值从小到大排序的，所以槽也是从小到大排序的， 所以在数据页中查找记录可以用二分法，具体查找过程如下：
二分找到槽中间位为 2，2号槽最大记录为 8，8 &amp;lt; 11，继续往后找。 二分找到槽中间位为 3，2号槽最大记录为 12，12 &amp;gt; 11，所以要找的记录在 3 号槽里。 再次找到槽 2，即主键值为 8 的记录，然后往后遍历，直到找到主键值为 11 的记录。 参考 从数据页的角度看 B+ 树 </description>
    </item>
    
  </channel>
</rss>
