<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>go on 冲和</title>
    <link>https://theone-daxia.github.io/categories/go/</link>
    <description>Recent content in go on 冲和</description>
    <image>
      <url>https://theone-daxia.github.io/papermod-cover.png</url>
      <link>https://theone-daxia.github.io/papermod-cover.png</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 01 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://theone-daxia.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang内存管理和垃圾回收</title>
      <link>https://theone-daxia.github.io/blog/code/go/gc/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/go/gc/</guid>
      <description>前言 网上有很多讲 go gc 的文章，但大多讲的不明不白， 一些突然出现的术语更是不知从何而起，导致看过一些文章后对 gc 依旧云里雾里。 好在最近在公众号看到了一篇文章，我觉得写的很赞， 起码解答了那些突然出现的术语是什么。
我决定把它搬运到这里，手写一遍记忆更加深刻。 接下来是对原文的默写，忘了就直接抄写。
原文中会贴出一些 go 的源代码，我本地 go 版本是 1.18.2，对照看的时候会有些出入， 出入的地方我就改贴上我本地的 go 源代码。 所有图片都来源于原文，原文地址在最下面参考文献中列出。 默写加抄写 本文以 go 内存管理为切入点，再到 go 垃圾回收，系统的讲解了 go 自动内存管理系统的设计和原理。
一、TCMalloc go 的内存管理借鉴了 TCMalloc 的设计思想，TCMalloc 全称 Thread-Caching Malloc， 是 google 开发的内存分配器，为了方便理解 go 的内存管理，有必要先熟悉下 TCMalloc。
(一) Page 操作系统对内存的管理以页为单位，TCMalloc 也是这样， 只不过 TCMalloc 里的 Page 大小与操作系统里的大小不一定相等，是倍数的关系。
(二) Span 一组连续的 Page 称为 Span，比如可以有 4 个页大小的 Span，也可以有 8 个页大小的 Span。 Span 比 Page 高一个层级，是为了方便管理一定大小的内存区域， Span 是 TCMalloc 中内存管理的基本单位。</description>
    </item>
    
    <item>
      <title>go实现可重入锁</title>
      <link>https://theone-daxia.github.io/blog/code/go/recursive-mutex/</link>
      <pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/go/recursive-mutex/</guid>
      <description>总结 go 的 Mutex 不支持可重入， 因为它的实现里没有记录哪个 goroutine 拥有这把锁，所以要实现一个可重入的锁， 关键在于要能记录哪个 goroutine 拥有锁，且要记录重入次数。
要记录拥有锁的 goroutine，有两个方案：
获取 goroutine id，来记录哪个 goroutine 获取了锁。 由调用方的 goroutine 提供一个 token，来标识它自己。 对于方案一，获取 goroutine id 有两种方式。
第一种是通过 runtime.Stack() 获取。
func GoId() int64 { var buf [64]byte n := runtime.Stack(buf[:], false) s := strings.TrimPrefix(string(buf[:n]), &amp;#34;goroutine &amp;#34;) idField := strings.Fields(s)[0] id, err := strconv.Atoi(idField) if err != nil { panic(fmt.Sprintf(&amp;#34;cannot get goroutine id: %v\n&amp;#34;, err)) } return int64(id) } 另一种是通过 hacker 方式获取。此方式大致通过以下三步来获取 goroutine id：</description>
    </item>
    
    <item>
      <title>&amp;^ 运算符</title>
      <link>https://theone-daxia.github.io/blog/code/go/bit-clear/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/go/bit-clear/</guid>
      <description>在查看 Mutex 源码中，看到了 &amp;amp;^ 这个运算符， 没见过，就去查了查。
含义 按位清零
即：
运算符右边数字二进制为1的位置，左边数字二进制对应位置置0 运算符右边数字二进制为0的位置，左边数字二进制对应位置保留 示例 a := 10 b := 2 res := a &amp;amp;^ b fmt.Printf(&amp;#34;a = %b(%d)\n&amp;#34;, a, a) // a = 1010(10) fmt.Printf(&amp;#34;b = %b(%d)\n&amp;#34;, b, b) // b = 10(2) fmt.Printf(&amp;#34;res = %b(%d)\n&amp;#34;, res, res) // res = 1000(8) </description>
    </item>
    
    <item>
      <title>原子操作实现互斥锁</title>
      <link>https://theone-daxia.github.io/blog/code/go/atomic/</link>
      <pubDate>Wed, 16 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/go/atomic/</guid>
      <description>下面的 MyMutex 即通过原子操作实现了 Locker 接口。
只是简易实现，实际的 Mutex 还会考虑到给 新来的goroutine、等待的goroutine更多机会， 还有饥饿处理（1ms后），防止队尾的goroutine总是得不到锁。
package test import ( &amp;#34;sync&amp;#34; &amp;#34;sync/atomic&amp;#34; &amp;#34;testing&amp;#34; ) type MyMutex struct { key int32 } func (m *MyMutex)Lock() { for !atomic.CompareAndSwapInt32(&amp;amp;m.key, 0, 1) { } } func (m *MyMutex)Unlock() { atomic.StoreInt32(&amp;amp;m.key, 0) } func TestMutex(t *testing.T) { var count = 0 var wg sync.WaitGroup var myMux = MyMutex{} wg.Add(10) for i := 0; i &amp;lt; 10; i++ { go func() { defer wg.</description>
    </item>
    
    <item>
      <title>用 go 写个简单的 shell</title>
      <link>https://theone-daxia.github.io/blog/code/shell_in_go/</link>
      <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://theone-daxia.github.io/blog/code/shell_in_go/</guid>
      <description>什么是 shell shell 就是一个支持输入命令，并显示出命令的输出的东西
用 go 来写个简单的 shell 并使用它 步骤
编写代码 build 出二进制文件，并将路径添加到 /etc/shells 里面 更换使用的 shell，退出重进（chsc -s xxx） 完整代码如下
package main import ( &amp;#34;bufio&amp;#34; &amp;#34;errors&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;os/exec&amp;#34; &amp;#34;strings&amp;#34; ) func main() { reader := bufio.NewReader(os.Stdin) for { fmt.Print(&amp;#34;&amp;gt; &amp;#34;) // Read the keyboad input input, err := reader.ReadString(&amp;#39;\n&amp;#39;) if err != nil { fmt.Fprintln(os.Stderr, err) } // Handle the execution of the input if err = execInput(input); err !</description>
    </item>
    
  </channel>
</rss>
